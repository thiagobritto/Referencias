{">>>": {"title": ">>>", "body": "<main>\n<dd><p>O prompt padr\u00e3o do console interativo do Python. Normalmente visto em exemplos de c\u00f3digo que podem ser executados interativamente no interpretador.</p>\n</dd>\n</main>\n"}, "...": {"title": "...", "body": "<main>\n<dd><p>Pode se referir a:</p>\n<ul class=\"simple\">\n<li><p>O prompt padr\u00e3o do shell interativo do Python ao inserir o c\u00f3digo para um bloco de c\u00f3digo recuado, quando dentro de um par de delimitadores correspondentes esquerdo e direito (par\u00eanteses, colchetes, chaves ou aspas triplas) ou ap\u00f3s especificar um decorador.</p></li>\n<li><p>A constante embutida <a class=\"reference internal\" href=\"library/constants.html#Ellipsis\" title=\"Ellipsis\"><code class=\"xref py py-const docutils literal notranslate\"><span class=\"pre\">Ellipsis</span></code></a>.</p></li>\n</ul>\n</dd>\n</main>\n"}, "2to3": {"title": "2to3", "body": "<main>\n<dd><p>Uma ferramenta que tenta converter c\u00f3digo Python 2.x em c\u00f3digo Python 3.x tratando a maioria das incompatibilidades que podem ser detectadas com an\u00e1lise do c\u00f3digo-fonte e navega\u00e7\u00e3o na \u00e1rvore sint\u00e1tica.</p>\n<p>O 2to3 est\u00e1 dispon\u00edvel na biblioteca padr\u00e3o como <a class=\"reference internal\" href=\"library/2to3.html#module-lib2to3\" title=\"lib2to3: The 2to3 library\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">lib2to3</span></code></a>; um ponto de entrada \u00e9 disponibilizado como <code class=\"file docutils literal notranslate\"><span class=\"pre\">Tools/scripts/2to3</span></code>. Veja <a class=\"reference internal\" href=\"library/2to3.html#to3-reference\"><span class=\"std std-ref\">2to3 - Tradu\u00e7\u00e3o Automatizada de C\u00f3digo Python 2 para 3</span></a>.</p>\n</dd>\n</main>\n"}, "classe base abstrata": {"title": "classe base abstrata", "body": "<main>\n<dd><p>Classes bases abstratas complementam <a class=\"reference internal\" href=\"#term-duck-typing\"><span class=\"xref std std-term\">tipagem pato</span></a>, fornecendo uma maneira de definir interfaces quando outras t\u00e9cnicas, como <a class=\"reference internal\" href=\"library/functions.html#hasattr\" title=\"hasattr\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">hasattr()</span></code></a>, seriam desajeitadas ou sutilmente erradas (por exemplo, com <a class=\"reference internal\" href=\"reference/datamodel.html#special-lookup\"><span class=\"std std-ref\">m\u00e9todos m\u00e1gicos</span></a>). CBAs introduzem subclasses virtuais, classes que n\u00e3o herdam de uma classe mas ainda s\u00e3o reconhecidas por <a class=\"reference internal\" href=\"library/functions.html#isinstance\" title=\"isinstance\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">isinstance()</span></code></a> e <a class=\"reference internal\" href=\"library/functions.html#issubclass\" title=\"issubclass\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">issubclass()</span></code></a>; veja a documenta\u00e7\u00e3o do m\u00f3dulo <a class=\"reference internal\" href=\"library/abc.html#module-abc\" title=\"abc: Abstract base classes according to :pep:`3119`.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">abc</span></code></a>. Python vem com muitas CBAs embutidas para estruturas de dados (no m\u00f3dulo <a class=\"reference internal\" href=\"library/collections.abc.html#module-collections.abc\" title=\"collections.abc: Abstract base classes for containers\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">collections.abc</span></code></a>), n\u00fameros (no m\u00f3dulo <a class=\"reference internal\" href=\"library/numbers.html#module-numbers\" title=\"numbers: Numeric abstract base classes (Complex, Real, Integral, etc.).\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">numbers</span></code></a>), fluxos (no m\u00f3dulo <a class=\"reference internal\" href=\"library/io.html#module-io\" title=\"io: Core tools for working with streams.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code></a>), localizadores e carregadores de importa\u00e7\u00e3o (no m\u00f3dulo <a class=\"reference internal\" href=\"library/importlib.html#module-importlib.abc\" title=\"importlib.abc: Abstract base classes related to import\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib.abc</span></code></a>). Voc\u00ea pode criar suas pr\u00f3prias CBAs com o m\u00f3dulo <a class=\"reference internal\" href=\"library/abc.html#module-abc\" title=\"abc: Abstract base classes according to :pep:`3119`.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">abc</span></code></a>.</p>\n</dd>\n</main>\n"}, "anota\u00e7\u00e3o": {"title": "anota\u00e7\u00e3o", "body": "<main>\n<dd><p>Um r\u00f3tulo associado a uma vari\u00e1vel, um atributo de classe ou um par\u00e2metro de fun\u00e7\u00e3o ou valor de retorno, usado por conven\u00e7\u00e3o como <a class=\"reference internal\" href=\"#term-type-hint\"><span class=\"xref std std-term\">dica de tipo</span></a>.</p>\n<p>Anota\u00e7\u00f5es de vari\u00e1veis \u200b\u200blocais n\u00e3o podem ser acessadas em tempo de execu\u00e7\u00e3o, mas anota\u00e7\u00f5es de vari\u00e1veis \u200b\u200bglobais, atributos de classe e fun\u00e7\u00f5es s\u00e3o armazenadas no atributo especial <code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__annotations__</span></code> de m\u00f3dulos, classes e fun\u00e7\u00f5es, respectivamente.</p>\n<p>Veja <a class=\"reference internal\" href=\"#term-variable-annotation\"><span class=\"xref std std-term\">anota\u00e7\u00e3o de vari\u00e1vel</span></a>, <a class=\"reference internal\" href=\"#term-function-annotation\"><span class=\"xref std std-term\">anota\u00e7\u00e3o de fun\u00e7\u00e3o</span></a>, <span class=\"target\" id=\"index-74\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0484\"><strong>PEP 484</strong></a> e <span class=\"target\" id=\"index-75\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0526\"><strong>PEP 526</strong></a>, que descrevem esta funcionalidade. Veja tamb\u00e9m <a class=\"reference internal\" href=\"howto/annotations.html#annotations-howto\"><span class=\"std std-ref\">Annotations Best Practices</span></a> para as melhores pr\u00e1ticas sobre como trabalhar com anota\u00e7\u00f5es.</p>\n</dd>\n</main>\n"}, "argumento": {"title": "argumento", "body": "<main>\n<dd><p>Um valor passado para uma <a class=\"reference internal\" href=\"#term-function\"><span class=\"xref std std-term\">fun\u00e7\u00e3o</span></a> (ou <a class=\"reference internal\" href=\"#term-method\"><span class=\"xref std std-term\">m\u00e9todo</span></a>) ao chamar a fun\u00e7\u00e3o. Existem dois tipos de argumento:</p>\n<ul>\n<li><p><em class=\"dfn\">argumento nomeado</em>: um argumento precedido por um identificador (por exemplo, <code class=\"docutils literal notranslate\"><span class=\"pre\">name=</span></code>) na chamada de uma fun\u00e7\u00e3o ou passada como um valor em um dicion\u00e1rio precedido por <code class=\"docutils literal notranslate\"><span class=\"pre\">**</span></code>. Por exemplo, <code class=\"docutils literal notranslate\"><span class=\"pre\">3</span></code> e <code class=\"docutils literal notranslate\"><span class=\"pre\">5</span></code> s\u00e3o ambos argumentos nomeados na chamada da fun\u00e7\u00e3o <a class=\"reference internal\" href=\"library/functions.html#complex\" title=\"complex\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">complex()</span></code></a> a seguir:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">complex</span><span class=\"p\">(</span><span class=\"n\">real</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">imag</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">complex</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"p\">{</span><span class=\"s1\">&#39;real&#39;</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">&#39;imag&#39;</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n</li>\n<li><p><em class=\"dfn\">argumento posicional</em>: um argumento que n\u00e3o \u00e9 um argumento nomeado. Argumentos posicionais podem aparecer no in\u00edcio da lista de argumentos e/ou podem ser passados com elementos de um <a class=\"reference internal\" href=\"#term-iterable\"><span class=\"xref std std-term\">iter\u00e1vel</span></a> precedido por <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code>. Por exemplo, <code class=\"docutils literal notranslate\"><span class=\"pre\">3</span></code> e <code class=\"docutils literal notranslate\"><span class=\"pre\">5</span></code> s\u00e3o ambos argumentos posicionais nas chamadas a seguir:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">complex</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">complex</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<p>Argumentos s\u00e3o atribu\u00eddos \u00e0s vari\u00e1veis locais nomeadas no corpo da fun\u00e7\u00e3o. Veja a se\u00e7\u00e3o <a class=\"reference internal\" href=\"reference/expressions.html#calls\"><span class=\"std std-ref\">Calls</span></a> para as regras de atribui\u00e7\u00e3o. Sintaticamente, qualquer express\u00e3o pode ser usada para representar um argumento; avaliada a express\u00e3o, o valor \u00e9 atribu\u00eddo \u00e0 vari\u00e1vel local.</p>\n<p>Veja tamb\u00e9m o termo <a class=\"reference internal\" href=\"#term-parameter\"><span class=\"xref std std-term\">par\u00e2metro</span></a> no gloss\u00e1rio, a pergunta no FAQ sobre <a class=\"reference internal\" href=\"faq/programming.html#faq-argument-vs-parameter\"><span class=\"std std-ref\">a diferen\u00e7a entre argumentos e par\u00e2metros</span></a> e <span class=\"target\" id=\"index-76\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0362\"><strong>PEP 362</strong></a>.</p>\n</dd>\n</main>\n"}, "gerenciador de contexto ass\u00edncrono": {"title": "gerenciador de contexto ass\u00edncrono", "body": "<main>\n<dd><p>Um objeto que controla o ambiente visto numa instru\u00e7\u00e3o <a class=\"reference internal\" href=\"reference/compound_stmts.html#async-with\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">with</span></code></a> por meio da defini\u00e7\u00e3o dos m\u00e9todos <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__aenter__()</span></code> e <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__aexit__()</span></code>. Introduzido pela <span class=\"target\" id=\"index-77\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a>.</p>\n</dd>\n</main>\n"}, "gerador ass\u00edncrono": {"title": "gerador ass\u00edncrono", "body": "<main>\n<dd><p>Uma fun\u00e7\u00e3o que retorna um <a class=\"reference internal\" href=\"#term-asynchronous-generator-iterator\"><span class=\"xref std std-term\">iterador gerador ass\u00edncrono</span></a>. \u00c9 parecida com uma fun\u00e7\u00e3o de corrotina definida com <a class=\"reference internal\" href=\"reference/compound_stmts.html#async-def\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">def</span></code></a> exceto pelo fato de conter instru\u00e7\u00f5es <a class=\"reference internal\" href=\"reference/simple_stmts.html#yield\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">yield</span></code></a> para produzir uma s\u00e9rie de valores que podem ser usados em um la\u00e7o <a class=\"reference internal\" href=\"reference/compound_stmts.html#async-for\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">for</span></code></a>.</p>\n<p>Normalmente se refere a uma fun\u00e7\u00e3o geradora ass\u00edncrona, mas pode se referir a um <em>iterador gerador ass\u00edncrono</em> em alguns contextos. Em casos em que o significado n\u00e3o esteja claro, usar o termo completo evita a ambiguidade.</p>\n<p>Uma fun\u00e7\u00e3o geradora ass\u00edncrona pode conter express\u00f5es <a class=\"reference internal\" href=\"reference/expressions.html#await\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">await</span></code></a> e tamb\u00e9m as instru\u00e7\u00f5es <a class=\"reference internal\" href=\"reference/compound_stmts.html#async-for\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">for</span></code></a> e <a class=\"reference internal\" href=\"reference/compound_stmts.html#async-with\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">with</span></code></a>.</p>\n</dd>\n</main>\n"}, "iterador gerador ass\u00edncrono": {"title": "iterador gerador ass\u00edncrono", "body": "<main>\n<dd><p>Um objeto criado por uma fun\u00e7\u00e3o <a class=\"reference internal\" href=\"#term-asynchronous-generator\"><span class=\"xref std std-term\">geradora ass\u00edncrona</span></a>.</p>\n<p>Este \u00e9 um <a class=\"reference internal\" href=\"#term-asynchronous-iterator\"><span class=\"xref std std-term\">iterador ass\u00edncrono</span></a> que, quando chamado usando o m\u00e9todo <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__anext__()</span></code>, retorna um objeto aguard\u00e1vel que executar\u00e1 o corpo da fun\u00e7\u00e3o geradora ass\u00edncrona at\u00e9 a pr\u00f3xima express\u00e3o <a class=\"reference internal\" href=\"reference/simple_stmts.html#yield\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">yield</span></code></a>.</p>\n<p>Cada <a class=\"reference internal\" href=\"reference/simple_stmts.html#yield\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">yield</span></code></a> suspende temporariamente o processamento, lembrando o estado de execu\u00e7\u00e3o do local (incluindo vari\u00e1veis locais e instru\u00e7\u00f5es <code class=\"docutils literal notranslate\"><span class=\"pre\">try</span></code> pendentes). Quando o <em>iterador gerador ass\u00edncrono</em> \u00e9 efetivamente retomado com outro aguard\u00e1vel retornado por <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__anext__()</span></code>, ele inicia de onde parou. Veja <span class=\"target\" id=\"index-78\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a> e <span class=\"target\" id=\"index-79\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0525\"><strong>PEP 525</strong></a>.</p>\n</dd>\n</main>\n"}, "iter\u00e1vel ass\u00edncrono": {"title": "iter\u00e1vel ass\u00edncrono", "body": "<main>\n<dd><p>Um objeto que pode ser usado em uma instru\u00e7\u00e3o <a class=\"reference internal\" href=\"reference/compound_stmts.html#async-for\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">for</span></code></a>. Deve retornar um <a class=\"reference internal\" href=\"#term-asynchronous-iterator\"><span class=\"xref std std-term\">iterador ass\u00edncrono</span></a> do seu m\u00e9todo <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__aiter__()</span></code>. Introduzido por <span class=\"target\" id=\"index-80\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a>.</p>\n</dd>\n</main>\n"}, "iterador ass\u00edncrono": {"title": "iterador ass\u00edncrono", "body": "<main>\n<dd><p>Um objeto que implementa os m\u00e9todos <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__aiter__()</span></code> e <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__anext__()</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">__anext__</span></code> deve retornar um objeto <a class=\"reference internal\" href=\"#term-awaitable\"><span class=\"xref std std-term\">aguard\u00e1vel</span></a>. <a class=\"reference internal\" href=\"reference/compound_stmts.html#async-for\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">for</span></code></a> resolve os aguard\u00e1veis retornados por um m\u00e9todo <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__anext__()</span></code> do iterador ass\u00edncrono at\u00e9 que ele levante uma exce\u00e7\u00e3o <a class=\"reference internal\" href=\"library/exceptions.html#StopAsyncIteration\" title=\"StopAsyncIteration\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">StopAsyncIteration</span></code></a>. Introduzido pela <span class=\"target\" id=\"index-81\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a>.</p>\n</dd>\n</main>\n"}, "atributo": {"title": "atributo", "body": "<main>\n<dd><p>Um valor associado a um objeto que \u00e9 referenciado pelo nome separado por um ponto. Por exemplo, se um objeto <em>o</em> tem um atributo <em>a</em> esse seria referenciado como <em>o.a</em>.</p>\n</dd>\n</main>\n"}, "aguard\u00e1vel": {"title": "aguard\u00e1vel", "body": "<main>\n<dd><p>Um objeto que pode ser usado em uma express\u00e3o <a class=\"reference internal\" href=\"reference/expressions.html#await\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">await</span></code></a>. Pode ser uma <a class=\"reference internal\" href=\"#term-coroutine\"><span class=\"xref std std-term\">corrotina</span></a> ou um objeto com um m\u00e9todo <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__await__()</span></code>. Veja tamb\u00e9m a <span class=\"target\" id=\"index-82\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a>.</p>\n</dd>\n</main>\n"}, "bdfl": {"title": "BDFL", "body": "<main>\n<dd><p>Abrevia\u00e7\u00e3o da express\u00e3o da l\u00edngua inglesa \u201cBenevolent Dictator for Life\u201d (em portugu\u00eas, \u201cDitador Benevolente Vital\u00edcio\u201d), referindo-se a <a class=\"reference external\" href=\"https://gvanrossum.github.io/\">Guido van Rossum</a>, criador do Python.</p>\n</dd>\n</main>\n"}, "arquivo bin\u00e1rio": {"title": "arquivo bin\u00e1rio", "body": "<main>\n<dd><p>Um <a class=\"reference internal\" href=\"#term-file-object\"><span class=\"xref std std-term\">objeto arquivo</span></a> capaz de ler e gravar em <a class=\"reference internal\" href=\"#term-bytes-like-object\"><span class=\"xref std std-term\">objetos byte ou similar</span></a>. Exemplos de arquivos bin\u00e1rios s\u00e3o arquivos abertos no modo bin\u00e1rio (<code class=\"docutils literal notranslate\"><span class=\"pre\">'rb'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'wb'</span></code> ou <code class=\"docutils literal notranslate\"><span class=\"pre\">'rb+'</span></code>), <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.stdin.buffer</span></code>, <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.stdout.buffer</span></code> e inst\u00e2ncias de <a class=\"reference internal\" href=\"library/io.html#io.BytesIO\" title=\"io.BytesIO\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">io.BytesIO</span></code></a> e <a class=\"reference internal\" href=\"library/gzip.html#gzip.GzipFile\" title=\"gzip.GzipFile\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">gzip.GzipFile</span></code></a>.</p>\n<p>Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-text-file\"><span class=\"xref std std-term\">arquivo texto</span></a> para um objeto arquivo capaz de ler e gravar em objetos <a class=\"reference internal\" href=\"library/stdtypes.html#str\" title=\"str\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">str</span></code></a>.</p>\n</dd>\n</main>\n"}, "refer\u00eancia emprestada": {"title": "refer\u00eancia emprestada", "body": "<main>\n<dd><p>Na API C do Python, uma refer\u00eancia emprestada \u00e9 uma refer\u00eancia a um objeto. Ela n\u00e3o modifica a contagem de refer\u00eancias do objeto. Ela se torna um ponteiro pendente se o objeto for destru\u00eddo. Por exemplo, uma coleta de lixo pode remover a \u00faltima <a class=\"reference internal\" href=\"#term-strong-reference\"><span class=\"xref std std-term\">refer\u00eancia forte</span></a> para o objeto e assim destru\u00ed-lo.</p>\n<p>Chamar <a class=\"reference internal\" href=\"c-api/refcounting.html#c.Py_INCREF\" title=\"Py_INCREF\"><code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_INCREF()</span></code></a> na <a class=\"reference internal\" href=\"#term-borrowed-reference\"><span class=\"xref std std-term\">refer\u00eancia emprestada</span></a> \u00e9 recomendado para convert\u00ea-lo, internamente, em uma <a class=\"reference internal\" href=\"#term-strong-reference\"><span class=\"xref std std-term\">refer\u00eancia forte</span></a>, exceto quando o objeto n\u00e3o pode ser destru\u00eddo antes do \u00faltimo uso da refer\u00eancia emprestada. A fun\u00e7\u00e3o <a class=\"reference internal\" href=\"c-api/refcounting.html#c.Py_NewRef\" title=\"Py_NewRef\"><code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_NewRef()</span></code></a> pode ser usada para criar uma nova <a class=\"reference internal\" href=\"#term-strong-reference\"><span class=\"xref std std-term\">refer\u00eancia forte</span></a>.</p>\n</dd>\n</main>\n"}, "objeto byte ou similar": {"title": "objeto byte ou similar", "body": "<main>\n<dd><p>Um objeto com suporte ao o <a class=\"reference internal\" href=\"c-api/buffer.html#bufferobjects\"><span class=\"std std-ref\">Protocolo de Buffer</span></a> e que pode exportar um buffer C <a class=\"reference internal\" href=\"#term-contiguous\"><span class=\"xref std std-term\">cont\u00edguo</span></a>. Isso inclui todos os objetos <a class=\"reference internal\" href=\"library/stdtypes.html#bytes\" title=\"bytes\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">bytes</span></code></a>, <a class=\"reference internal\" href=\"library/stdtypes.html#bytearray\" title=\"bytearray\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">bytearray</span></code></a> e <a class=\"reference internal\" href=\"library/array.html#array.array\" title=\"array.array\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">array.array</span></code></a>, al\u00e9m de muitos objetos  <a class=\"reference internal\" href=\"library/stdtypes.html#memoryview\" title=\"memoryview\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">memoryview</span></code></a> comuns. Objetos byte ou similar podem ser usados para v\u00e1rias opera\u00e7\u00f5es que funcionam com dados bin\u00e1rios; isso inclui compacta\u00e7\u00e3o, salvamento em um arquivo bin\u00e1rio e envio por um soquete.</p>\n<p>Algumas opera\u00e7\u00f5es precisam que os dados bin\u00e1rios sejam mut\u00e1veis. A documenta\u00e7\u00e3o geralmente se refere a eles como \u201cobjetos byte ou similar para leitura e escrita\u201d. Exemplos de objetos de buffer mut\u00e1vel incluem <a class=\"reference internal\" href=\"library/stdtypes.html#bytearray\" title=\"bytearray\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">bytearray</span></code></a> e um <a class=\"reference internal\" href=\"library/stdtypes.html#memoryview\" title=\"memoryview\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">memoryview</span></code></a> de um <a class=\"reference internal\" href=\"library/stdtypes.html#bytearray\" title=\"bytearray\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">bytearray</span></code></a>. Outras opera\u00e7\u00f5es exigem que os dados bin\u00e1rios sejam armazenados em objetos imut\u00e1veis (\u201cobjetos byte ou similar para somente leitura\u201d); exemplos disso incluem <a class=\"reference internal\" href=\"library/stdtypes.html#bytes\" title=\"bytes\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">bytes</span></code></a> e a <a class=\"reference internal\" href=\"library/stdtypes.html#memoryview\" title=\"memoryview\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">memoryview</span></code></a> de um objeto <a class=\"reference internal\" href=\"library/stdtypes.html#bytes\" title=\"bytes\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">bytes</span></code></a>.</p>\n</dd>\n</main>\n"}, "bytecode": {"title": "bytecode", "body": "<main>\n<dd><p>O c\u00f3digo-fonte Python \u00e9 compilado para bytecode, a representa\u00e7\u00e3o interna de um programa em Python no interpretador CPython. O bytecode tamb\u00e9m \u00e9 mantido em cache em arquivos <code class=\"docutils literal notranslate\"><span class=\"pre\">.pyc</span></code> e <code class=\"docutils literal notranslate\"><span class=\"pre\">.pyo</span></code>, de forma que executar um mesmo arquivo \u00e9 mais r\u00e1pido na segunda vez (a recompila\u00e7\u00e3o dos fontes para bytecode n\u00e3o \u00e9 necess\u00e1ria). Esta \u201clinguagem intermedi\u00e1ria\u201d \u00e9 adequada para execu\u00e7\u00e3o em uma <a class=\"reference internal\" href=\"#term-virtual-machine\"><span class=\"xref std std-term\">m\u00e1quina virtual</span></a>, que executa o c\u00f3digo de m\u00e1quina correspondente para cada bytecode. Tenha em mente que n\u00e3o se espera que bytecodes sejam executados entre m\u00e1quinas virtuais Python diferentes, nem que se mantenham est\u00e1veis entre vers\u00f5es de Python.</p>\n<p>Uma lista de instru\u00e7\u00f5es bytecode pode ser encontrada na documenta\u00e7\u00e3o para <a class=\"reference internal\" href=\"library/dis.html#bytecodes\"><span class=\"std std-ref\">o m\u00f3dulo dis</span></a>.</p>\n</dd>\n</main>\n"}, "fun\u00e7\u00e3o de retorno": {"title": "fun\u00e7\u00e3o de retorno", "body": "<main>\n<dd><p>Tamb\u00e9m conhecida como callback, \u00e9 uma fun\u00e7\u00e3o sub-rotina que \u00e9 passada como um argumento a ser executado em algum ponto no futuro.</p>\n</dd>\n</main>\n"}, "classe": {"title": "classe", "body": "<main>\n<dd><p>Um modelo para cria\u00e7\u00e3o de objetos definidos pelo usu\u00e1rio. Defini\u00e7\u00f5es de classe normalmente cont\u00e9m defini\u00e7\u00f5es de m\u00e9todos que operam sobre inst\u00e2ncias da classe.</p>\n</dd>\n</main>\n"}, "vari\u00e1vel de classe": {"title": "vari\u00e1vel de classe", "body": "<main>\n<dd><p>Uma vari\u00e1vel definida em uma classe e destinada a ser modificada apenas no n\u00edvel da classe (ou seja, n\u00e3o em uma inst\u00e2ncia da classe).</p>\n</dd>\n</main>\n"}, "coer\u00e7\u00e3o": {"title": "coer\u00e7\u00e3o", "body": "<main>\n<dd><p>A convers\u00e3o impl\u00edcita de uma inst\u00e2ncia de um tipo para outro durante uma opera\u00e7\u00e3o que envolve dois argumentos do mesmo tipo. Por exemplo, <code class=\"docutils literal notranslate\"><span class=\"pre\">int(3.15)</span></code> converte o n\u00famero do ponto flutuante no n\u00famero inteiro <code class=\"docutils literal notranslate\"><span class=\"pre\">3</span></code>, mas em <code class=\"docutils literal notranslate\"><span class=\"pre\">3+4.5</span></code>, cada argumento \u00e9 de um tipo diferente (um int, um float), e ambos devem ser convertidos para o mesmo tipo antes de poderem ser adicionados ou isso levantar\u00e1 um <a class=\"reference internal\" href=\"library/exceptions.html#TypeError\" title=\"TypeError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">TypeError</span></code></a>. Sem coer\u00e7\u00e3o, todos os argumentos de tipos compat\u00edveis teriam que ser normalizados com o mesmo valor pelo programador, por exemplo, <code class=\"docutils literal notranslate\"><span class=\"pre\">float(3)+4.5</span></code> em vez de apenas <code class=\"docutils literal notranslate\"><span class=\"pre\">3+4.5</span></code>.</p>\n</dd>\n</main>\n"}, "n\u00famero complexo": {"title": "n\u00famero complexo", "body": "<main>\n<dd><p>Uma extens\u00e3o ao familiar sistema de n\u00fameros reais em que todos os n\u00fameros s\u00e3o expressos como uma soma de uma parte real e uma parte imagin\u00e1ria. N\u00fameros imagin\u00e1rios s\u00e3o m\u00faltiplos reais da unidade imagin\u00e1ria (a raiz quadrada de <code class=\"docutils literal notranslate\"><span class=\"pre\">-1</span></code>), normalmente escrita como <code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code> em matem\u00e1tica ou <code class=\"docutils literal notranslate\"><span class=\"pre\">j</span></code> em engenharia. O Python tem suporte nativo para n\u00fameros complexos, que s\u00e3o escritos com esta \u00faltima nota\u00e7\u00e3o; a parte imagin\u00e1ria escrita com um sufixo <code class=\"docutils literal notranslate\"><span class=\"pre\">j</span></code>, p.ex., <code class=\"docutils literal notranslate\"><span class=\"pre\">3+1j</span></code>. Para ter acesso aos equivalentes para n\u00fameros complexos do m\u00f3dulo <a class=\"reference internal\" href=\"library/math.html#module-math\" title=\"math: Mathematical functions (sin() etc.).\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">math</span></code></a>, utilize <a class=\"reference internal\" href=\"library/cmath.html#module-cmath\" title=\"cmath: Mathematical functions for complex numbers.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cmath</span></code></a>. O uso de n\u00fameros complexos \u00e9 uma funcionalidade matem\u00e1tica bastante avan\u00e7ada. Se voc\u00ea n\u00e3o sabe se ir\u00e1 precisar deles, \u00e9 quase certo que voc\u00ea pode ignor\u00e1-los sem problemas.</p>\n</dd>\n</main>\n"}, "gerenciador de contexto": {"title": "gerenciador de contexto", "body": "<main>\n<dd><p>Um objeto que controla o ambiente visto numa instru\u00e7\u00e3o <a class=\"reference internal\" href=\"reference/compound_stmts.html#with\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">with</span></code></a> por meio da defini\u00e7\u00e3o dos m\u00e9todos <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__enter__()</span></code> e <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__exit__()</span></code>. Veja <span class=\"target\" id=\"index-83\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0343\"><strong>PEP 343</strong></a>.</p>\n</dd>\n</main>\n"}, "vari\u00e1vel de contexto": {"title": "vari\u00e1vel de contexto", "body": "<main>\n<dd><p>Uma vari\u00e1vel que pode ter valores diferentes, dependendo do seu contexto. Isso \u00e9 semelhante ao armazenamento local de threads, no qual cada thread pode ter um valor diferente para uma vari\u00e1vel. No entanto, com vari\u00e1veis de contexto, pode haver v\u00e1rios contextos em uma thread e o principal uso para vari\u00e1veis de contexto \u00e9 acompanhar as vari\u00e1veis em tarefas ass\u00edncronas simult\u00e2neas. Veja <a class=\"reference internal\" href=\"library/contextvars.html#module-contextvars\" title=\"contextvars: Context Variables\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contextvars</span></code></a>.</p>\n</dd>\n</main>\n"}, "cont\u00edguo": {"title": "cont\u00edguo", "body": "<main>\n<dd><p id=\"index-10\">Um buffer \u00e9 considerado cont\u00edguo exatamente se for <em>cont\u00edguo C</em> ou <em>cont\u00edguo Fortran</em>. Os buffers de dimens\u00e3o zero s\u00e3o cont\u00edguos C e Fortran. Em vetores unidimensionais, os itens devem ser dispostos na mem\u00f3ria pr\u00f3ximos um do outro, em ordem crescente de \u00edndices, come\u00e7ando do zero. Em vetores multidimensionais cont\u00edguos C, o \u00faltimo \u00edndice varia mais rapidamente ao visitar itens em ordem de endere\u00e7o de mem\u00f3ria. No entanto, nos vetores cont\u00edguos do Fortran, o primeiro \u00edndice varia mais rapidamente.</p>\n</dd>\n</main>\n"}, "corrotina": {"title": "corrotina", "body": "<main>\n<dd><p>Corrotinas s\u00e3o uma forma mais generalizada de sub-rotinas. Sub-rotinas tem a entrada iniciada em um ponto, e a sa\u00edda em outro ponto. Corrotinas podem entrar, sair, e continuar em muitos pontos diferentes. Elas podem ser implementadas com a instru\u00e7\u00e3o <a class=\"reference internal\" href=\"reference/compound_stmts.html#async-def\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">def</span></code></a>. Veja tamb\u00e9m <span class=\"target\" id=\"index-84\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a>.</p>\n</dd>\n</main>\n"}, "fun\u00e7\u00e3o de corrotina": {"title": "fun\u00e7\u00e3o de corrotina", "body": "<main>\n<dd><p>Uma fun\u00e7\u00e3o que retorna um objeto do tipo <a class=\"reference internal\" href=\"#term-coroutine\"><span class=\"xref std std-term\">corrotina</span></a>. Uma fun\u00e7\u00e3o de corrotina pode ser definida com a instru\u00e7\u00e3o <a class=\"reference internal\" href=\"reference/compound_stmts.html#async-def\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">def</span></code></a>, e pode conter as palavras chaves <a class=\"reference internal\" href=\"reference/expressions.html#await\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">await</span></code></a>, <a class=\"reference internal\" href=\"reference/compound_stmts.html#async-for\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">for</span></code></a>, e <a class=\"reference internal\" href=\"reference/compound_stmts.html#async-with\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">with</span></code></a>. Isso foi introduzido pela <span class=\"target\" id=\"index-85\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0492\"><strong>PEP 492</strong></a>.</p>\n</dd>\n</main>\n"}, "cpython": {"title": "CPython", "body": "<main>\n<dd><p>A implementa\u00e7\u00e3o can\u00f4nica da linguagem de programa\u00e7\u00e3o Python, como disponibilizada pelo <a class=\"reference external\" href=\"https://www.python.org\">python.org</a>. O termo \u201cCPython\u201d \u00e9 usado quando necess\u00e1rio distinguir esta implementa\u00e7\u00e3o de outras como Jython ou IronPython.</p>\n</dd>\n</main>\n"}, "decorador": {"title": "decorador", "body": "<main>\n<dd><p>Uma fun\u00e7\u00e3o que retorna outra fun\u00e7\u00e3o, geralmente aplicada como uma transforma\u00e7\u00e3o de fun\u00e7\u00e3o usando a sintaxe <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;wrapper</span></code>. Exemplos comuns para decoradores s\u00e3o <a class=\"reference internal\" href=\"library/functions.html#classmethod\" title=\"classmethod\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">classmethod()</span></code></a> e <a class=\"reference internal\" href=\"library/functions.html#staticmethod\" title=\"staticmethod\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">staticmethod()</span></code></a>.</p>\n<p>A sintaxe do decorador \u00e9 meramente um a\u00e7\u00facar sint\u00e1tico, as duas defini\u00e7\u00f5es de fun\u00e7\u00f5es a seguir s\u00e3o semanticamente equivalentes:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">staticmethod</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@staticmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>O mesmo conceito existe para as classes, mas n\u00e3o \u00e9 comumente utilizado. Veja a documenta\u00e7\u00e3o de <a class=\"reference internal\" href=\"reference/compound_stmts.html#function\"><span class=\"std std-ref\">defini\u00e7\u00f5es de fun\u00e7\u00e3o</span></a> e <a class=\"reference internal\" href=\"reference/compound_stmts.html#class\"><span class=\"std std-ref\">defini\u00e7\u00f5es de classe</span></a> para obter mais informa\u00e7\u00f5es sobre decoradores.</p>\n</dd>\n</main>\n"}, "descritor": {"title": "descritor", "body": "<main>\n<dd><p>Qualquer objeto que define os m\u00e9todos <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__get__()</span></code>, <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__set__()</span></code> ou <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__delete__()</span></code>. Quando um atributo de classe \u00e9 um descritor, seu comportamento de associa\u00e7\u00e3o especial \u00e9 acionado no acesso a um atributo. Normalmente, ao se utilizar <em>a.b</em> para se obter, definir ou excluir, um atributo dispara uma busca no objeto chamado <em>b</em> no dicion\u00e1rio de classe de <em>a</em>, mas se <em>b</em> for um descritor, o respectivo m\u00e9todo descritor \u00e9 chamado. Compreender descritores \u00e9 a chave para um profundo entendimento de Python pois eles s\u00e3o a base de muitas funcionalidades incluindo fun\u00e7\u00f5es, m\u00e9todos, propriedades, m\u00e9todos de classe, m\u00e9todos est\u00e1ticos e refer\u00eancias para superclasses.</p>\n<p>Para obter mais informa\u00e7\u00f5es sobre os m\u00e9todos dos descritores, veja: <a class=\"reference internal\" href=\"reference/datamodel.html#descriptors\"><span class=\"std std-ref\">Implementando descritores</span></a> ou o <a class=\"reference internal\" href=\"howto/descriptor.html#descriptorhowto\"><span class=\"std std-ref\">Guia de Descritores</span></a>.</p>\n</dd>\n</main>\n"}, "dicion\u00e1rio": {"title": "dicion\u00e1rio", "body": "<main>\n<dd><p>Um vetor associativo em que chaves arbitr\u00e1rias s\u00e3o mapeadas para valores. As chaves podem ser quaisquer objetos que possuam os m\u00e9todos <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__hash__()</span></code> e <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__eq__()</span></code>. Dicion\u00e1rios s\u00e3o estruturas chamadas de hash na linguagem Perl.</p>\n</dd>\n</main>\n"}, "compreens\u00e3o de dicion\u00e1rio": {"title": "compreens\u00e3o de dicion\u00e1rio", "body": "<main>\n<dd><p>Uma maneira compacta de processar todos ou parte dos elementos de um iter\u00e1vel e retornar um dicion\u00e1rio com os resultados. <code class=\"docutils literal notranslate\"><span class=\"pre\">results</span> <span class=\"pre\">=</span> <span class=\"pre\">{n:</span> <span class=\"pre\">n</span> <span class=\"pre\">**</span> <span class=\"pre\">2</span> <span class=\"pre\">for</span> <span class=\"pre\">n</span> <span class=\"pre\">in</span> <span class=\"pre\">range(10)}</span></code> gera um dicion\u00e1rio contendo a chave <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code> mapeada para o valor <code class=\"docutils literal notranslate\"><span class=\"pre\">n</span> <span class=\"pre\">**</span> <span class=\"pre\">2</span></code>. Veja <a class=\"reference internal\" href=\"reference/expressions.html#comprehensions\"><span class=\"std std-ref\">Displays for lists, sets and dictionaries</span></a>.</p>\n</dd>\n</main>\n"}, "vis\u00e3o de dicion\u00e1rio": {"title": "vis\u00e3o de dicion\u00e1rio", "body": "<main>\n<dd><p>Os objetos retornados por <a class=\"reference internal\" href=\"library/stdtypes.html#dict.keys\" title=\"dict.keys\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">dict.keys()</span></code></a>, <a class=\"reference internal\" href=\"library/stdtypes.html#dict.values\" title=\"dict.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">dict.values()</span></code></a> e <a class=\"reference internal\" href=\"library/stdtypes.html#dict.items\" title=\"dict.items\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">dict.items()</span></code></a> s\u00e3o chamados de vis\u00f5es de dicion\u00e1rio. Eles fornecem uma vis\u00e3o din\u00e2mica das entradas do dicion\u00e1rio, o que significa que quando o dicion\u00e1rio \u00e9 alterado, a vis\u00e3o reflete essas altera\u00e7\u00f5es. Para for\u00e7ar a vis\u00e3o de dicion\u00e1rio a se tornar uma lista completa use <code class=\"docutils literal notranslate\"><span class=\"pre\">list(dictview)</span></code>. Veja <a class=\"reference internal\" href=\"library/stdtypes.html#dict-views\"><span class=\"std std-ref\">Objetos de vis\u00e3o de dicion\u00e1rio</span></a>.</p>\n</dd>\n</main>\n"}, "docstring": {"title": "docstring", "body": "<main>\n<dd><p>Abreviatura de \u201cdocumentation string\u201d (string de documenta\u00e7\u00e3o). Uma string literal que aparece como primeira express\u00e3o numa classe, fun\u00e7\u00e3o ou m\u00f3dulo. Ainda que sejam ignoradas quando a su\u00edte \u00e9 executada, \u00e9 reconhecida pelo compilador que a coloca no atributo <code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__doc__</span></code> da classe, fun\u00e7\u00e3o ou m\u00f3dulo que a encapsula. Como ficam dispon\u00edveis por meio de introspec\u00e7\u00e3o, docstrings s\u00e3o o lugar can\u00f4nico para documenta\u00e7\u00e3o do objeto.</p>\n</dd>\n</main>\n"}, "tipagem pato": {"title": "tipagem pato", "body": "<main>\n<dd><p>Tamb\u00e9m conhecida como <em>duck-typing</em>, \u00e9 um estilo de programa\u00e7\u00e3o que n\u00e3o verifica o tipo do objeto para determinar se ele possui a interface correta; em vez disso, o m\u00e9todo ou atributo \u00e9 simplesmente chamado ou utilizado (\u201cSe se parece com um pato e grasna como um pato, ent\u00e3o deve ser um pato.\u201d) Enfatizando interfaces ao inv\u00e9s de tipos espec\u00edficos, o c\u00f3digo bem desenvolvido aprimora sua flexibilidade por permitir substitui\u00e7\u00e3o polim\u00f3rfica. Tipagem pato evita necessidade de testes que usem <a class=\"reference internal\" href=\"library/functions.html#type\" title=\"type\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">type()</span></code></a> ou <a class=\"reference internal\" href=\"library/functions.html#isinstance\" title=\"isinstance\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">isinstance()</span></code></a>. (Note, por\u00e9m, que a tipagem pato pode ser complementada com o uso de <a class=\"reference internal\" href=\"#term-abstract-base-class\"><span class=\"xref std std-term\">classes base abstratas</span></a>.) Ao inv\u00e9s disso, s\u00e3o normalmente empregados testes <a class=\"reference internal\" href=\"library/functions.html#hasattr\" title=\"hasattr\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">hasattr()</span></code></a> ou programa\u00e7\u00e3o <a class=\"reference internal\" href=\"#term-EAFP\"><span class=\"xref std std-term\">EAFP</span></a>.</p>\n</dd>\n</main>\n"}, "eafp": {"title": "EAFP", "body": "<main>\n<dd><p>Iniciais da express\u00e3o em ingl\u00eas \u201ceasier to ask for forgiveness than permission\u201d que significa \u201c\u00e9 mais f\u00e1cil pedir perd\u00e3o que permiss\u00e3o\u201d. Este estilo de codifica\u00e7\u00e3o comum em Python assume a exist\u00eancia de chaves ou atributos v\u00e1lidos e captura exce\u00e7\u00f5es caso essa premissa se prove falsa. Este estilo limpo e r\u00e1pido se caracteriza pela presen\u00e7a de v\u00e1rias instru\u00e7\u00f5es <a class=\"reference internal\" href=\"reference/compound_stmts.html#try\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">try</span></code></a> e <a class=\"reference internal\" href=\"reference/compound_stmts.html#except\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">except</span></code></a>. A t\u00e9cnica diverge do estilo <a class=\"reference internal\" href=\"#term-LBYL\"><span class=\"xref std std-term\">LBYL</span></a>, comum em outras linguagens como C, por exemplo.</p>\n</dd>\n</main>\n"}, "express\u00e3o": {"title": "express\u00e3o", "body": "<main>\n<dd><p>Uma parte da sintaxe que pode ser avaliada para algum valor. Em outras palavras, uma express\u00e3o \u00e9 a acumula\u00e7\u00e3o de elementos de express\u00e3o como literais, nomes, atributos de acesso, operadores ou chamadas de fun\u00e7\u00f5es, todos os quais retornam um valor. Em contraste com muitas outras linguagens, nem todas as constru\u00e7\u00f5es de linguagem s\u00e3o express\u00f5es. Tamb\u00e9m existem <a class=\"reference internal\" href=\"#term-statement\"><span class=\"xref std std-term\">instru\u00e7\u00f5es</span></a>, as quais n\u00e3o podem ser usadas como express\u00f5es, como, por exemplo, <a class=\"reference internal\" href=\"reference/compound_stmts.html#while\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">while</span></code></a>. Atribui\u00e7\u00f5es tamb\u00e9m s\u00e3o instru\u00e7\u00f5es, n\u00e3o express\u00f5es.</p>\n</dd>\n</main>\n"}, "m\u00f3dulo de extens\u00e3o": {"title": "m\u00f3dulo de extens\u00e3o", "body": "<main>\n<dd><p>Um m\u00f3dulo escrito em C ou C++, usando a API C do Python para interagir tanto com c\u00f3digo de usu\u00e1rio quanto do n\u00facleo.</p>\n</dd>\n</main>\n"}, "f-string": {"title": "f-string", "body": "<main>\n<dd><p>Literais string prefixadas com <code class=\"docutils literal notranslate\"><span class=\"pre\">'f'</span></code> ou <code class=\"docutils literal notranslate\"><span class=\"pre\">'F'</span></code> s\u00e3o conhecidas como \u201cf-strings\u201d que \u00e9 uma abrevia\u00e7\u00e3o de <a class=\"reference internal\" href=\"reference/lexical_analysis.html#f-strings\"><span class=\"std std-ref\">formatted string literals</span></a>. Veja tamb\u00e9m <span class=\"target\" id=\"index-86\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0498\"><strong>PEP 498</strong></a>.</p>\n</dd>\n</main>\n"}, "objeto arquivo": {"title": "objeto arquivo", "body": "<main>\n<dd><p>Um objeto que exp\u00f5e uma API orientada a arquivos (com m\u00e9todos tais como <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">read()</span></code> ou <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">write()</span></code>) para um recurso subjacente. Dependendo da maneira como foi criado, um objeto arquivo pode mediar o acesso a um arquivo real no disco ou outro tipo de dispositivo de armazenamento ou de comunica\u00e7\u00e3o (por exemplo a entrada/sa\u00edda padr\u00e3o, buffers em mem\u00f3ria, soquetes, pipes, etc.). Objetos arquivo tamb\u00e9m s\u00e3o chamados de <em class=\"dfn\">objetos arquivo ou similares</em> ou <em class=\"dfn\">fluxos</em>.</p>\n<p>Atualmente h\u00e1 tr\u00eas categorias de objetos arquivo: <a class=\"reference internal\" href=\"#term-binary-file\"><span class=\"xref std std-term\">arquivos bin\u00e1rios</span></a> brutos, <a class=\"reference internal\" href=\"#term-binary-file\"><span class=\"xref std std-term\">arquivos bin\u00e1rios</span></a> em buffer e <a class=\"reference internal\" href=\"#term-text-file\"><span class=\"xref std std-term\">arquivos textos</span></a>. Suas interfaces est\u00e3o definidas no m\u00f3dulo <a class=\"reference internal\" href=\"library/io.html#module-io\" title=\"io: Core tools for working with streams.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">io</span></code></a>. A forma can\u00f4nica para criar um objeto arquivo \u00e9 usando a fun\u00e7\u00e3o <a class=\"reference internal\" href=\"library/functions.html#open\" title=\"open\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">open()</span></code></a>.</p>\n</dd>\n</main>\n"}, "objeto arquivo ou similar": {"title": "objeto arquivo ou similar", "body": "<main>\n<dd><p>Um sin\u00f4nimo do termo <a class=\"reference internal\" href=\"#term-file-object\"><span class=\"xref std std-term\">objeto arquivo</span></a>.</p>\n</dd>\n</main>\n"}, "tratador de erros e codifica\u00e7\u00e3o do sistema de arquivos": {"title": "tratador de erros e codifica\u00e7\u00e3o do sistema de arquivos", "body": "<main>\n<dd><p>Tratador de erros e codifica\u00e7\u00e3o usado pelo Python para decodificar bytes do sistema operacional e codificar Unicode para o sistema operacional.</p>\n<p>A codifica\u00e7\u00e3o do sistema de arquivos deve garantir a decodifica\u00e7\u00e3o bem-sucedida de todos os bytes abaixo de 128. Se a codifica\u00e7\u00e3o do sistema de arquivos falhar em fornecer essa garantia, as fun\u00e7\u00f5es da API podem levantar <a class=\"reference internal\" href=\"library/exceptions.html#UnicodeError\" title=\"UnicodeError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">UnicodeError</span></code></a>.</p>\n<p>As fun\u00e7\u00f5es <a class=\"reference internal\" href=\"library/sys.html#sys.getfilesystemencoding\" title=\"sys.getfilesystemencoding\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sys.getfilesystemencoding()</span></code></a> e <a class=\"reference internal\" href=\"library/sys.html#sys.getfilesystemencodeerrors\" title=\"sys.getfilesystemencodeerrors\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sys.getfilesystemencodeerrors()</span></code></a> podem ser usadas para obter o tratador de erros e codifica\u00e7\u00e3o do sistema de arquivos.</p>\n<p>O <a class=\"reference internal\" href=\"#term-filesystem-encoding-and-error-handler\"><span class=\"xref std std-term\">tratador de erros e codifica\u00e7\u00e3o do sistema de arquivos</span></a> s\u00e3o configurados na inicializa\u00e7\u00e3o do Python pela fun\u00e7\u00e3o <code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">PyConfig_Read()</span></code>: veja os membros <a class=\"reference internal\" href=\"c-api/init_config.html#c.PyConfig.filesystem_encoding\" title=\"PyConfig.filesystem_encoding\"><code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">filesystem_encoding</span></code></a> e <a class=\"reference internal\" href=\"c-api/init_config.html#c.PyConfig.filesystem_errors\" title=\"PyConfig.filesystem_errors\"><code class=\"xref c c-member docutils literal notranslate\"><span class=\"pre\">filesystem_errors</span></code></a> do <a class=\"reference internal\" href=\"c-api/init_config.html#c.PyConfig\" title=\"PyConfig\"><code class=\"xref c c-type docutils literal notranslate\"><span class=\"pre\">PyConfig</span></code></a>.</p>\n<p>Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-locale-encoding\"><span class=\"xref std std-term\">codifica\u00e7\u00e3o da localidade</span></a>.</p>\n</dd>\n</main>\n"}, "localizador": {"title": "localizador", "body": "<main>\n<dd><p>Um objeto que tenta encontrar o <a class=\"reference internal\" href=\"#term-loader\"><span class=\"xref std std-term\">carregador</span></a> para um m\u00f3dulo que est\u00e1 sendo importado.</p>\n<p>Desde o Python 3.3, existem dois tipos de localizador: <a class=\"reference internal\" href=\"#term-meta-path-finder\"><span class=\"xref std std-term\">localizadores de metacaminho</span></a> para uso com <a class=\"reference internal\" href=\"library/sys.html#sys.meta_path\" title=\"sys.meta_path\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.meta_path</span></code></a>, e <a class=\"reference internal\" href=\"#term-path-entry-finder\"><span class=\"xref std std-term\">localizadores de entrada de caminho</span></a> para uso com <a class=\"reference internal\" href=\"library/sys.html#sys.path_hooks\" title=\"sys.path_hooks\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.path_hooks</span></code></a>.</p>\n<p>Veja <span class=\"target\" id=\"index-87\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0302\"><strong>PEP 302</strong></a>, <span class=\"target\" id=\"index-88\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0420\"><strong>PEP 420</strong></a> e <span class=\"target\" id=\"index-89\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0451\"><strong>PEP 451</strong></a> para mais informa\u00e7\u00f5es.</p>\n</dd>\n</main>\n"}, "divis\u00e3o pelo piso": {"title": "divis\u00e3o pelo piso", "body": "<main>\n<dd><p>Divis\u00e3o matem\u00e1tica que arredonda para baixo para o inteiro mais pr\u00f3ximo. O operador de divis\u00e3o pelo piso \u00e9 <code class=\"docutils literal notranslate\"><span class=\"pre\">//</span></code>. Por exemplo, a express\u00e3o <code class=\"docutils literal notranslate\"><span class=\"pre\">11</span> <span class=\"pre\">//</span> <span class=\"pre\">4</span></code> retorna o valor <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span></code> ao inv\u00e9s de <code class=\"docutils literal notranslate\"><span class=\"pre\">2.75</span></code>, que seria retornado pela divis\u00e3o de ponto flutuante. Note que <code class=\"docutils literal notranslate\"><span class=\"pre\">(-11)</span> <span class=\"pre\">//</span> <span class=\"pre\">4</span></code> \u00e9 <code class=\"docutils literal notranslate\"><span class=\"pre\">-3</span></code> porque \u00e9 <code class=\"docutils literal notranslate\"><span class=\"pre\">-2.75</span></code> arredondado <em>para baixo</em>. Consulte a <span class=\"target\" id=\"index-90\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0238\"><strong>PEP 238</strong></a>.</p>\n</dd>\n</main>\n"}, "fun\u00e7\u00e3o": {"title": "fun\u00e7\u00e3o", "body": "<main>\n<dd><p>Uma s\u00e9rie de instru\u00e7\u00f5es que retorna algum valor para um chamador. Tamb\u00e9m pode ser passado zero ou mais <a class=\"reference internal\" href=\"#term-argument\"><span class=\"xref std std-term\">argumentos</span></a> que podem ser usados na execu\u00e7\u00e3o do corpo. Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-parameter\"><span class=\"xref std std-term\">par\u00e2metro</span></a>, <a class=\"reference internal\" href=\"#term-method\"><span class=\"xref std std-term\">m\u00e9todo</span></a> e a se\u00e7\u00e3o <a class=\"reference internal\" href=\"reference/compound_stmts.html#function\"><span class=\"std std-ref\">Defini\u00e7\u00f5es de fun\u00e7\u00e3o</span></a>.</p>\n</dd>\n</main>\n"}, "anota\u00e7\u00e3o de fun\u00e7\u00e3o": {"title": "anota\u00e7\u00e3o de fun\u00e7\u00e3o", "body": "<main>\n<dd><p>Uma <a class=\"reference internal\" href=\"#term-annotation\"><span class=\"xref std std-term\">anota\u00e7\u00e3o</span></a> de um par\u00e2metro de fun\u00e7\u00e3o ou valor de retorno.</p>\n<p>Anota\u00e7\u00f5es de fun\u00e7\u00e3o s\u00e3o comumente usados por <a class=\"reference internal\" href=\"#term-type-hint\"><span class=\"xref std std-term\">dicas de tipo</span></a>: por exemplo, essa fun\u00e7\u00e3o espera receber dois argumentos <a class=\"reference internal\" href=\"library/functions.html#int\" title=\"int\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">int</span></code></a> e tamb\u00e9m \u00e9 esperado que devolva um valor <a class=\"reference internal\" href=\"library/functions.html#int\" title=\"int\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">int</span></code></a>:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">sum_two_numbers</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n   <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n</pre></div>\n</div>\n<p>A sintaxe de anota\u00e7\u00e3o de fun\u00e7\u00e3o \u00e9 explicada na se\u00e7\u00e3o <a class=\"reference internal\" href=\"reference/compound_stmts.html#function\"><span class=\"std std-ref\">Defini\u00e7\u00f5es de fun\u00e7\u00e3o</span></a>.</p>\n<p>Veja <a class=\"reference internal\" href=\"#term-variable-annotation\"><span class=\"xref std std-term\">anota\u00e7\u00e3o de vari\u00e1vel</span></a> e <span class=\"target\" id=\"index-91\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0484\"><strong>PEP 484</strong></a>, que descrevem esta funcionalidade. Veja tamb\u00e9m <a class=\"reference internal\" href=\"howto/annotations.html#annotations-howto\"><span class=\"std std-ref\">Annotations Best Practices</span></a> para as melhores pr\u00e1ticas sobre como trabalhar com anota\u00e7\u00f5es.</p>\n</dd>\n</main>\n"}, "__future__": {"title": "__future__", "body": "<main>\n<dd><p>A <a class=\"reference internal\" href=\"reference/simple_stmts.html#future\"><span class=\"std std-ref\">future statement</span></a>, <code class=\"docutils literal notranslate\"><span class=\"pre\">from</span> <span class=\"pre\">__future__</span> <span class=\"pre\">import</span> <span class=\"pre\">&lt;feature&gt;</span></code>,\ndirects the compiler to compile the current module using syntax or\nsemantics that will become standard in a future release of Python.\nThe <a class=\"reference internal\" href=\"library/__future__.html#module-__future__\" title=\"__future__: Future statement definitions\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">__future__</span></code></a> module documents the possible values of\n<em>feature</em>.  By importing this module and evaluating its variables,\nyou can see when a new feature was first added to the language and\nwhen it will (or did) become the default:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">__future__</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">__future__</span><span class=\"o\">.</span><span class=\"n\">division</span>\n<span class=\"go\">_Feature((2, 2, 0, &#39;alpha&#39;, 2), (3, 0, 0, &#39;alpha&#39;, 0), 8192)</span>\n</pre></div>\n</div>\n</dd>\n</main>\n"}, "coleta de lixo": {"title": "coleta de lixo", "body": "<main>\n<dd><p>Tamb\u00e9m conhecido como <em>garbage collection</em>, \u00e9 o processo de liberar a mem\u00f3ria quando ela n\u00e3o \u00e9 mais utilizada. Python executa a libera\u00e7\u00e3o da mem\u00f3ria atrav\u00e9s da contagem de refer\u00eancias e um coletor de lixo c\u00edclico que \u00e9 capaz de detectar e interromper refer\u00eancias c\u00edclicas. O coletor de lixo pode ser controlado usando o m\u00f3dulo <a class=\"reference internal\" href=\"library/gc.html#module-gc\" title=\"gc: Interface to the cycle-detecting garbage collector.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">gc</span></code></a>.</p>\n</dd>\n</main>\n"}, "gerador": {"title": "gerador", "body": "<main>\n<dd><p>Uma fun\u00e7\u00e3o que retorna um <a class=\"reference internal\" href=\"#term-generator-iterator\"><span class=\"xref std std-term\">iterador gerador</span></a>. \u00c9 parecida com uma fun\u00e7\u00e3o normal, exceto pelo fato de conter express\u00f5es <a class=\"reference internal\" href=\"reference/simple_stmts.html#yield\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">yield</span></code></a> para produzir uma s\u00e9rie de valores que podem ser usados em um la\u00e7o \u201cfor\u201d ou que podem ser obtidos um de cada vez com a fun\u00e7\u00e3o <a class=\"reference internal\" href=\"library/functions.html#next\" title=\"next\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">next()</span></code></a>.</p>\n<p>Normalmente refere-se a uma fun\u00e7\u00e3o geradora, mas pode referir-se a um <em>iterador gerador</em> em alguns contextos. Em alguns casos onde o significado desejado n\u00e3o est\u00e1 claro, usar o termo completo evita ambiguidade.</p>\n</dd>\n</main>\n"}, "iterador gerador": {"title": "iterador gerador", "body": "<main>\n<dd><p>Um objeto criado por uma fun\u00e7\u00e3o <a class=\"reference internal\" href=\"#term-generator\"><span class=\"xref std std-term\">geradora</span></a>.</p>\n<p>Cada <a class=\"reference internal\" href=\"reference/simple_stmts.html#yield\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">yield</span></code></a> suspende temporariamente o processamento, memorizando o estado da execu\u00e7\u00e3o local (incluindo vari\u00e1veis locais e instru\u00e7\u00f5es try pendentes). Quando o <em>iterador gerador</em> retorna, ele se recupera do \u00faltimo ponto onde estava (em contrapartida as fun\u00e7\u00f5es que iniciam uma nova execu\u00e7\u00e3o a cada vez que s\u00e3o invocadas).</p>\n</dd>\n</main>\n"}, "express\u00e3o geradora": {"title": "express\u00e3o geradora", "body": "<main>\n<dd><p>Uma express\u00e3o que retorna um iterador. Parece uma express\u00e3o normal, seguido de uma cl\u00e1usula <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">for</span></code> definindo uma vari\u00e1vel de loop, um range, e uma cl\u00e1usula <code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">if</span></code> opcional. A express\u00e3o combinada gera valores para uma fun\u00e7\u00e3o encapsuladora:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">sum</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">*</span><span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>         <span class=\"c1\"># sum of squares 0, 1, 4, ... 81</span>\n<span class=\"go\">285</span>\n</pre></div>\n</div>\n</dd>\n</main>\n"}, "fun\u00e7\u00e3o gen\u00e9rica": {"title": "fun\u00e7\u00e3o gen\u00e9rica", "body": "<main>\n<dd><p>Uma fun\u00e7\u00e3o composta por v\u00e1rias fun\u00e7\u00f5es implementando a mesma opera\u00e7\u00e3o para diferentes tipos. Qual implementa\u00e7\u00e3o dever\u00e1 ser usada durante a execu\u00e7\u00e3o \u00e9 determinada pelo algoritmo de despacho.</p>\n<p>Veja tamb\u00e9m a entrada <a class=\"reference internal\" href=\"#term-single-dispatch\"><span class=\"xref std std-term\">despacho \u00fanico</span></a> no gloss\u00e1rio, o decorador <a class=\"reference internal\" href=\"library/functools.html#functools.singledispatch\" title=\"functools.singledispatch\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">functools.singledispatch()</span></code></a>, e a <span class=\"target\" id=\"index-92\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0443\"><strong>PEP 443</strong></a>.</p>\n</dd>\n</main>\n"}, "tipo gen\u00e9rico": {"title": "tipo gen\u00e9rico", "body": "<main>\n<dd><p>A <a class=\"reference internal\" href=\"#term-type\"><span class=\"xref std std-term\">type</span></a> that can be parameterized; typically a\n<a class=\"reference internal\" href=\"reference/datamodel.html#sequence-types\"><span class=\"std std-ref\">container class</span></a> such as <a class=\"reference internal\" href=\"library/stdtypes.html#list\" title=\"list\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">list</span></code></a> or\n<a class=\"reference internal\" href=\"library/stdtypes.html#dict\" title=\"dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a>. Used for <a class=\"reference internal\" href=\"#term-type-hint\"><span class=\"xref std std-term\">type hints</span></a> and\n<a class=\"reference internal\" href=\"#term-annotation\"><span class=\"xref std std-term\">annotations</span></a>.</p>\n<p>For more details, see <a class=\"reference internal\" href=\"library/stdtypes.html#types-genericalias\"><span class=\"std std-ref\">generic alias types</span></a>,\n<span class=\"target\" id=\"index-22\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0483\"><strong>PEP 483</strong></a>, <span class=\"target\" id=\"index-23\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0484\"><strong>PEP 484</strong></a>, <span class=\"target\" id=\"index-24\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0585\"><strong>PEP 585</strong></a>, and the <a class=\"reference internal\" href=\"library/typing.html#module-typing\" title=\"typing: Support for type hints (see :pep:`484`).\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">typing</span></code></a> module.</p>\n</dd>\n</main>\n"}, "gil": {"title": "GIL", "body": "<main>\n<dd><p>Veja <a class=\"reference internal\" href=\"#term-global-interpreter-lock\"><span class=\"xref std std-term\">bloqueio global do interpretador</span></a>.</p>\n</dd>\n</main>\n"}, "bloqueio global do interpretador": {"title": "bloqueio global do interpretador", "body": "<main>\n<dd><p>O mecanismo utilizado pelo interpretador <a class=\"reference internal\" href=\"#term-CPython\"><span class=\"xref std std-term\">CPython</span></a> para garantir que apenas uma thread execute o <a class=\"reference internal\" href=\"#term-bytecode\"><span class=\"xref std std-term\">bytecode</span></a> Python por vez. Isto simplifica a implementa\u00e7\u00e3o do CPython ao fazer com que o modelo de objetos (incluindo tipos embutidos cr\u00edticos como o <a class=\"reference internal\" href=\"library/stdtypes.html#dict\" title=\"dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a>) ganhem seguran\u00e7a impl\u00edcita contra acesso concorrente. Travar todo o interpretador facilita que o interpretador em si seja multitarefa, \u00e0s custas de muito do paralelismo j\u00e1 provido por m\u00e1quinas multiprocessador.</p>\n<p>No entanto, alguns m\u00f3dulos de extens\u00e3o, tanto da biblioteca padr\u00e3o quanto de terceiros, s\u00e3o desenvolvidos de forma a liberar o GIL ao realizar tarefas computacionalmente muito intensas, como compacta\u00e7\u00e3o ou c\u00e1lculos de hash. Al\u00e9m disso, o GIL \u00e9 sempre liberado nas opera\u00e7\u00f5es de E/S.</p>\n<p>No passado, esfor\u00e7os para criar um interpretador que lidasse plenamente com threads (travando dados compartilhados numa granularidade bem mais fina) n\u00e3o foram bem sucedidos devido a queda no desempenho ao serem executados em processadores de apenas um n\u00facleo. Acredita-se que superar essa quest\u00e3o de desempenho acabaria tornando a implementa\u00e7\u00e3o muito mais complicada e bem mais dif\u00edcil de manter.</p>\n</dd>\n</main>\n"}, "pyc baseado em hash": {"title": "pyc baseado em hash", "body": "<main>\n<dd><p>Um arquivo de cache em bytecode que usa hash ao inv\u00e9s do tempo, no qual o arquivo de c\u00f3digo-fonte foi modificado pela \u00faltima vez, para determinar a sua validade. Veja <a class=\"reference internal\" href=\"reference/import.html#pyc-invalidation\"><span class=\"std std-ref\">Cached bytecode invalidation</span></a>.</p>\n</dd>\n</main>\n"}, "hashe\u00e1vel": {"title": "hashe\u00e1vel", "body": "<main>\n<dd><p>Um objeto \u00e9 <em>hashe\u00e1vel</em> se tem um valor de hash que nunca muda durante seu ciclo de vida (precisa ter um m\u00e9todo <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__hash__()</span></code>) e pode ser comparado com outros objetos (precisa ter um m\u00e9todo <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__eq__()</span></code>). Objetos hashe\u00e1veis que s\u00e3o comparados como iguais devem ter o mesmo valor de hash.</p>\n<p>A hasheabilidade faz com que um objeto possa ser usado como uma chave de dicion\u00e1rio e como um membro de conjunto, pois estas estruturas de dados utilizam os valores de hash internamente.</p>\n<p>A maioria dos objetos embutidos imut\u00e1veis do Python s\u00e3o hashe\u00e1veis; containers mut\u00e1veis (tais como listas ou dicion\u00e1rios) n\u00e3o s\u00e3o; containers imut\u00e1veis (tais como tuplas e frozensets) s\u00e3o hashe\u00e1veis apenas se os seus elementos s\u00e3o hashe\u00e1veis. Objetos que s\u00e3o inst\u00e2ncias de classes definidas pelo usu\u00e1rio s\u00e3o hashe\u00e1veis por padr\u00e3o. Todos eles comparam de forma desigual (exceto entre si mesmos), e o seu valor hash \u00e9 derivado a partir do seu <a class=\"reference internal\" href=\"library/functions.html#id\" title=\"id\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">id()</span></code></a>.</p>\n</dd>\n</main>\n"}, "idle": {"title": "IDLE", "body": "<main>\n<dd><p>Um ambiente de desenvolvimento integrado para Python. IDLE \u00e9 um editor b\u00e1sico e um ambiente interpretador que vem junto com a distribui\u00e7\u00e3o padr\u00e3o do Python.</p>\n</dd>\n</main>\n"}, "imut\u00e1vel": {"title": "imut\u00e1vel", "body": "<main>\n<dd><p>Um objeto que possui um valor fixo. Objetos imut\u00e1veis incluem n\u00fameros, strings e tuplas. Estes objetos n\u00e3o podem ser alterados. Um novo objeto deve ser criado se um valor diferente tiver de ser armazenado. Objetos imut\u00e1veis t\u00eam um papel importante em lugares onde um valor constante de hash seja necess\u00e1rio, como por exemplo uma chave em um dicion\u00e1rio.</p>\n</dd>\n</main>\n"}, "caminho de importa\u00e7\u00e3o": {"title": "caminho de importa\u00e7\u00e3o", "body": "<main>\n<dd><p>Uma lista de localiza\u00e7\u00f5es (ou <a class=\"reference internal\" href=\"#term-path-entry\"><span class=\"xref std std-term\">entradas de caminho</span></a>) que s\u00e3o buscadas pelo <a class=\"reference internal\" href=\"#term-path-based-finder\"><span class=\"xref std std-term\">localizador baseado no caminho</span></a> por m\u00f3dulos para importar. Durante a importa\u00e7\u00e3o, esta lista de localiza\u00e7\u00f5es usualmente vem a partir de <a class=\"reference internal\" href=\"library/sys.html#sys.path\" title=\"sys.path\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.path</span></code></a>, mas para subpacotes ela tamb\u00e9m pode vir do atributo <code class=\"docutils literal notranslate\"><span class=\"pre\">__path__</span></code> de pacotes-pai.</p>\n</dd>\n</main>\n"}, "importa\u00e7\u00e3o": {"title": "importa\u00e7\u00e3o", "body": "<main>\n<dd><p>O processo pelo qual o c\u00f3digo Python em um m\u00f3dulo \u00e9 disponibilizado para o c\u00f3digo Python em outro m\u00f3dulo.</p>\n</dd>\n</main>\n"}, "importador": {"title": "importador", "body": "<main>\n<dd><p>Um objeto que localiza e carrega um m\u00f3dulo; Tanto um <a class=\"reference internal\" href=\"#term-finder\"><span class=\"xref std std-term\">localizador</span></a> e o objeto <a class=\"reference internal\" href=\"#term-loader\"><span class=\"xref std std-term\">carregador</span></a>.</p>\n</dd>\n</main>\n"}, "interativo": {"title": "interativo", "body": "<main>\n<dd><p>Python tem um interpretador interativo, o que significa que voc\u00ea pode digitar instru\u00e7\u00f5es e express\u00f5es no prompt do interpretador, execut\u00e1-los imediatamente e ver seus resultados. Apenas execute <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span></code> sem argumentos (possivelmente selecionando-o a partir do menu de aplica\u00e7\u00f5es de seu sistema operacional). O interpretador interativo \u00e9 uma maneira poderosa de testar novas ideias ou aprender mais sobre m\u00f3dulos e pacotes (lembre-se do comando <code class=\"docutils literal notranslate\"><span class=\"pre\">help(x)</span></code>).</p>\n</dd>\n</main>\n"}, "interpretado": {"title": "interpretado", "body": "<main>\n<dd><p>Python \u00e9 uma linguagem interpretada, em oposi\u00e7\u00e3o \u00e0quelas que s\u00e3o compiladas, embora esta distin\u00e7\u00e3o possa ser nebulosa devido \u00e0 presen\u00e7a do compilador de bytecode. Isto significa que os arquivos-fontes podem ser executados diretamente sem necessidade expl\u00edcita de se criar um arquivo execut\u00e1vel. Linguagens interpretadas normalmente t\u00eam um ciclo de desenvolvimento/depura\u00e7\u00e3o mais curto que as linguagens compiladas, apesar de seus programas geralmente serem executados mais lentamente. Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-interactive\"><span class=\"xref std std-term\">interativo</span></a>.</p>\n</dd>\n</main>\n"}, "desligamento do interpretador": {"title": "desligamento do interpretador", "body": "<main>\n<dd><p>Quando solicitado para desligar, o interpretador Python entra em uma fase especial, onde ele gradualmente libera todos os recursos alocados, tais como m\u00f3dulos e v\u00e1rias estruturas internas cr\u00edticas. Ele tamb\u00e9m faz diversas chamadas para o <a class=\"reference internal\" href=\"#term-garbage-collection\"><span class=\"xref std std-term\">coletor de lixo</span></a>. Isto pode disparar a execu\u00e7\u00e3o de c\u00f3digo em destrutores definidos pelo usu\u00e1rio ou fun\u00e7\u00e3o de retorno de refer\u00eancia fraca. C\u00f3digo executado durante a fase de desligamento pode encontrar diversas exce\u00e7\u00f5es, pois os recursos que ele depende podem n\u00e3o funcionar mais (exemplos comuns s\u00e3o os m\u00f3dulos de bibliotecas, ou os mecanismos de avisos).</p>\n<p>A principal raz\u00e3o para o interpretador desligar, \u00e9 que o m\u00f3dulo <code class=\"docutils literal notranslate\"><span class=\"pre\">__main__</span></code> ou o script sendo executado terminou sua execu\u00e7\u00e3o.</p>\n</dd>\n</main>\n"}, "iter\u00e1vel": {"title": "iter\u00e1vel", "body": "<main>\n<dd><p>Um objeto capaz de retornar seus membros um de cada vez. Exemplos de iter\u00e1veis incluem todos os tipos de sequ\u00eancia (tais como <a class=\"reference internal\" href=\"library/stdtypes.html#list\" title=\"list\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">list</span></code></a>, <a class=\"reference internal\" href=\"library/stdtypes.html#str\" title=\"str\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">str</span></code></a> e <a class=\"reference internal\" href=\"library/stdtypes.html#tuple\" title=\"tuple\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tuple</span></code></a>) e alguns tipos n\u00e3o sequenciais como <a class=\"reference internal\" href=\"library/stdtypes.html#dict\" title=\"dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a>, <a class=\"reference internal\" href=\"#term-file-object\"><span class=\"xref std std-term\">objeto arquivo</span></a>, e objetos de qualquer classe que voc\u00ea definir com um m\u00e9todo <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__iter__()</span></code> ou com um m\u00e9todo <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__getitem__()</span></code> que implemente a sem\u00e2ntica de <a class=\"reference internal\" href=\"#term-sequence\"><span class=\"xref std std-term\">Sequ\u00eancia</span></a>.</p>\n<p>Iter\u00e1veis podem ser usados em um la\u00e7o <a class=\"reference internal\" href=\"reference/compound_stmts.html#for\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">for</span></code></a> e em v\u00e1rios outros lugares em que uma sequ\u00eancia \u00e9 necess\u00e1ria (<a class=\"reference internal\" href=\"library/functions.html#zip\" title=\"zip\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">zip()</span></code></a>, <a class=\"reference internal\" href=\"library/functions.html#map\" title=\"map\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">map()</span></code></a>, \u2026). Quando um objeto iter\u00e1vel \u00e9 passado como argumento para a fun\u00e7\u00e3o nativa <a class=\"reference internal\" href=\"library/functions.html#iter\" title=\"iter\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iter()</span></code></a>, ela retorna um iterador para o objeto. Este iterador \u00e9 adequado para se varrer todo o conjunto de valores. Ao usar iter\u00e1veis, normalmente n\u00e3o \u00e9 necess\u00e1rio chamar <a class=\"reference internal\" href=\"library/functions.html#iter\" title=\"iter\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iter()</span></code></a> ou lidar com os objetos iteradores em si. A instru\u00e7\u00e3o <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> faz isso automaticamente para voc\u00ea, criando uma vari\u00e1vel tempor\u00e1ria para armazenar o iterador durante a execu\u00e7\u00e3o do la\u00e7o. Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-iterator\"><span class=\"xref std std-term\">iterador</span></a>, <a class=\"reference internal\" href=\"#term-sequence\"><span class=\"xref std std-term\">sequ\u00eancia</span></a>, e <a class=\"reference internal\" href=\"#term-generator\"><span class=\"xref std std-term\">gerador</span></a>.</p>\n</dd>\n</main>\n"}, "iterador": {"title": "iterador", "body": "<main>\n<dd><p>Um objeto que representa um fluxo de dados. Repetidas chamadas ao m\u00e9todo <a class=\"reference internal\" href=\"library/stdtypes.html#iterator.__next__\" title=\"iterator.__next__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__next__()</span></code></a> de um iterador (ou passando o objeto para a fun\u00e7\u00e3o embutida <a class=\"reference internal\" href=\"library/functions.html#next\" title=\"next\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">next()</span></code></a>) v\u00e3o retornar itens sucessivos do fluxo. Quando n\u00e3o houver mais dados dispon\u00edveis uma exce\u00e7\u00e3o <a class=\"reference internal\" href=\"library/exceptions.html#StopIteration\" title=\"StopIteration\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">StopIteration</span></code></a> exception ser\u00e1 levantada. Neste ponto, o objeto iterador se esgotou e quaisquer chamadas subsequentes a seu m\u00e9todo <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__next__()</span></code> v\u00e3o apenas levantar a exce\u00e7\u00e3o <a class=\"reference internal\" href=\"library/exceptions.html#StopIteration\" title=\"StopIteration\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">StopIteration</span></code></a> novamente. Iteradores precisam ter um m\u00e9todo <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__iter__()</span></code> que retorne o objeto iterador em si, de forma que todo iterador tamb\u00e9m \u00e9 iter\u00e1vel e pode ser usado na maioria dos lugares em que um iter\u00e1vel \u00e9 requerido. Uma not\u00e1vel exce\u00e7\u00e3o \u00e9 c\u00f3digo que tenta realizar passagens em m\u00faltiplas itera\u00e7\u00f5es. Um objeto cont\u00eainer (como uma <a class=\"reference internal\" href=\"library/stdtypes.html#list\" title=\"list\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">list</span></code></a>) produz um novo iterador a cada vez que voc\u00ea pass\u00e1-lo para a fun\u00e7\u00e3o <a class=\"reference internal\" href=\"library/functions.html#iter\" title=\"iter\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iter()</span></code></a> ou utiliz\u00e1-lo em um la\u00e7o <a class=\"reference internal\" href=\"reference/compound_stmts.html#for\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">for</span></code></a>. Tentar isso com o mesmo iterador apenas iria retornar o mesmo objeto iterador esgotado j\u00e1 utilizado na itera\u00e7\u00e3o anterior, como se fosse um cont\u00eainer vazio.</p>\n<p>Mais informa\u00e7\u00f5es podem ser encontradas em <a class=\"reference internal\" href=\"library/stdtypes.html#typeiter\"><span class=\"std std-ref\">Tipos iteradores</span></a>.</p>\n<div class=\"impl-detail compound\">\n<p><strong>CPython implementation detail:</strong> CPython does not consistently apply the requirement that an iterator\ndefine <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__iter__()</span></code>.</p>\n</div>\n</dd>\n</main>\n"}, "fun\u00e7\u00e3o chave": {"title": "fun\u00e7\u00e3o chave", "body": "<main>\n<dd><p>Uma fun\u00e7\u00e3o chave ou fun\u00e7\u00e3o cola\u00e7\u00e3o \u00e9 um cham\u00e1vel que retorna um valor usado para ordena\u00e7\u00e3o ou classifica\u00e7\u00e3o. Por exemplo, <a class=\"reference internal\" href=\"library/locale.html#locale.strxfrm\" title=\"locale.strxfrm\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">locale.strxfrm()</span></code></a> \u00e9 usada para produzir uma chave de ordena\u00e7\u00e3o que leva o locale em considera\u00e7\u00e3o para fins de ordena\u00e7\u00e3o.</p>\n<p>Uma por\u00e7\u00e3o de ferramentas em Python aceitam fun\u00e7\u00f5es chave para controlar como os elementos s\u00e3o ordenados ou agrupados. Algumas delas incluem <a class=\"reference internal\" href=\"library/functions.html#min\" title=\"min\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">min()</span></code></a>, <a class=\"reference internal\" href=\"library/functions.html#max\" title=\"max\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">max()</span></code></a>, <a class=\"reference internal\" href=\"library/functions.html#sorted\" title=\"sorted\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sorted()</span></code></a>, <a class=\"reference internal\" href=\"library/stdtypes.html#list.sort\" title=\"list.sort\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">list.sort()</span></code></a>, <a class=\"reference internal\" href=\"library/heapq.html#heapq.merge\" title=\"heapq.merge\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">heapq.merge()</span></code></a>, <a class=\"reference internal\" href=\"library/heapq.html#heapq.nsmallest\" title=\"heapq.nsmallest\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">heapq.nsmallest()</span></code></a>, <a class=\"reference internal\" href=\"library/heapq.html#heapq.nlargest\" title=\"heapq.nlargest\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">heapq.nlargest()</span></code></a> e <a class=\"reference internal\" href=\"library/itertools.html#itertools.groupby\" title=\"itertools.groupby\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">itertools.groupby()</span></code></a>.</p>\n<p>H\u00e1 v\u00e1rias maneiras de se criar fun\u00e7\u00f5es chave. Por exemplo, o m\u00e9todo <a class=\"reference internal\" href=\"library/stdtypes.html#str.lower\" title=\"str.lower\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">str.lower()</span></code></a> pode servir como uma fun\u00e7\u00e3o chave para ordena\u00e7\u00f5es insens\u00edveis \u00e0 caixa. Alternativamente, uma fun\u00e7\u00e3o chave ad-hoc pode ser constru\u00edda a partir de uma express\u00e3o <a class=\"reference internal\" href=\"reference/expressions.html#lambda\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">lambda</span></code></a>, como <code class=\"docutils literal notranslate\"><span class=\"pre\">lambda</span> <span class=\"pre\">r:</span> <span class=\"pre\">(r[0],</span> <span class=\"pre\">r[2])</span></code>. Al\u00e9m disso, o m\u00f3dulo <a class=\"reference internal\" href=\"library/operator.html#module-operator\" title=\"operator: Functions corresponding to the standard operators.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">operator</span></code></a> disp\u00f5e de tr\u00eas construtores para fun\u00e7\u00f5es chave: <a class=\"reference internal\" href=\"library/operator.html#operator.attrgetter\" title=\"operator.attrgetter\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">attrgetter()</span></code></a>, <a class=\"reference internal\" href=\"library/operator.html#operator.itemgetter\" title=\"operator.itemgetter\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">itemgetter()</span></code></a> e o <a class=\"reference internal\" href=\"library/operator.html#operator.methodcaller\" title=\"operator.methodcaller\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">methodcaller()</span></code></a>. Consulte o <a class=\"reference internal\" href=\"howto/sorting.html#sortinghowto\"><span class=\"std std-ref\">HowTo de Ordena\u00e7\u00e3o</span></a> para ver exemplos de como criar e utilizar fun\u00e7\u00f5es chave.</p>\n</dd>\n</main>\n"}, "argumento nomeado": {"title": "argumento nomeado", "body": "<main>\n<dd><p>Veja <a class=\"reference internal\" href=\"#term-argument\"><span class=\"xref std std-term\">argumento</span></a>.</p>\n</dd>\n</main>\n"}, "lambda": {"title": "lambda", "body": "<main>\n<dd><p>Uma fun\u00e7\u00e3o de linha an\u00f4nima consistindo de uma \u00fanica <a class=\"reference internal\" href=\"#term-expression\"><span class=\"xref std std-term\">express\u00e3o</span></a>, que \u00e9 avaliada quando a fun\u00e7\u00e3o \u00e9 chamada. A sintaxe para criar uma fun\u00e7\u00e3o lambda \u00e9 <code class=\"docutils literal notranslate\"><span class=\"pre\">lambda</span> <span class=\"pre\">[parameters]:</span> <span class=\"pre\">expression</span></code></p>\n</dd>\n</main>\n"}, "lbyl": {"title": "LBYL", "body": "<main>\n<dd><p>Iniciais da express\u00e3o em ingl\u00eas \u201clook before you leap\u201d, que significa algo como \u201colhe antes de pisar\u201d. Este estilo de codifica\u00e7\u00e3o testa as pr\u00e9-condi\u00e7\u00f5es explicitamente antes de fazer chamadas ou buscas. Este estilo contrasta com a abordagem <a class=\"reference internal\" href=\"#term-EAFP\"><span class=\"xref std std-term\">EAFP</span></a> e \u00e9 caracterizada pela presen\u00e7a de muitas instru\u00e7\u00f5es <a class=\"reference internal\" href=\"reference/compound_stmts.html#if\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">if</span></code></a>.</p>\n<p>Em um ambiente multithread, a abordagem LBYL pode arriscar a introdu\u00e7\u00e3o de uma condi\u00e7\u00e3o de corrida entre \u201co olhar\u201d e \u201co pisar\u201d. Por exemplo, o c\u00f3digo <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">key</span> <span class=\"pre\">in</span> <span class=\"pre\">mapping:</span> <span class=\"pre\">return</span> <span class=\"pre\">mapping[key]</span></code> pode falhar se outra thread remover <em>key</em> do <em>mapping</em> ap\u00f3s o teste, mas antes da olhada. Esse problema pode ser resolvido com bloqueios ou usando a abordagem EAFP.</p>\n</dd>\n</main>\n"}, "codifica\u00e7\u00e3o da localidade": {"title": "codifica\u00e7\u00e3o da localidade", "body": "<main>\n<dd><p>No Unix, \u00e9 a codifica\u00e7\u00e3o da localidade do LC_CTYPE, que pode ser definida com <code class=\"docutils literal notranslate\"><span class=\"pre\">locale.setlocale(locale.LC_CTYPE,</span> <span class=\"pre\">new_locale)</span></code>.</p>\n<p>No Windows, \u00e9 a p\u00e1gina de c\u00f3digo ANSI (ex: <code class=\"docutils literal notranslate\"><span class=\"pre\">cp1252</span></code>).</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">locale.getpreferredencoding(False)</span></code> pode ser usado para obter da codifica\u00e7\u00e3o da localidade.</p>\n<p>Python usa <a class=\"reference internal\" href=\"#term-filesystem-encoding-and-error-handler\"><span class=\"xref std std-term\">tratador de erros e codifica\u00e7\u00e3o do sistema de arquivos</span></a> para converter entre nomes de arquivos e nomes de arquivos de bytes Unicode.</p>\n</dd>\n</main>\n"}, "lista": {"title": "lista", "body": "<main>\n<dd><p>Uma <a class=\"reference internal\" href=\"#term-sequence\"><span class=\"xref std std-term\">sequ\u00eancia</span></a> embutida no Python. Apesar do seu nome, \u00e9 mais pr\u00f3ximo de um vetor em outras linguagens do que uma lista encadeada, como o acesso aos elementos \u00e9 da ordem O(1).</p>\n</dd>\n</main>\n"}, "compreens\u00e3o de lista": {"title": "compreens\u00e3o de lista", "body": "<main>\n<dd><p>Uma maneira compacta de processar todos ou parte dos elementos de uma sequ\u00eancia e retornar os resultados em uma lista. <code class=\"docutils literal notranslate\"><span class=\"pre\">result</span> <span class=\"pre\">=</span> <span class=\"pre\">['{:#04x}'.format(x)</span> <span class=\"pre\">for</span> <span class=\"pre\">x</span> <span class=\"pre\">in</span> <span class=\"pre\">range(256)</span> <span class=\"pre\">if</span> <span class=\"pre\">x</span> <span class=\"pre\">%</span> <span class=\"pre\">2</span> <span class=\"pre\">==</span> <span class=\"pre\">0]</span></code> gera uma lista de strings contendo n\u00fameros hexadecimais (0x..) no intervalo de 0 a 255. A cl\u00e1usula <a class=\"reference internal\" href=\"reference/compound_stmts.html#if\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">if</span></code></a> \u00e9 opcional. Se omitida, todos os elementos no <code class=\"docutils literal notranslate\"><span class=\"pre\">range(256)</span></code> ser\u00e3o processados.</p>\n</dd>\n</main>\n"}, "carregador": {"title": "carregador", "body": "<main>\n<dd><p>Um objeto que carrega um m\u00f3dulo. Deve definir um m\u00e9todo chamado <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">load_module()</span></code>. Um carregador \u00e9 normalmente devolvido por um <a class=\"reference internal\" href=\"#term-finder\"><span class=\"xref std std-term\">localizador</span></a>. Veja a <span class=\"target\" id=\"index-93\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0302\"><strong>PEP 302</strong></a> para detalhes e <a class=\"reference internal\" href=\"library/importlib.html#importlib.abc.Loader\" title=\"importlib.abc.Loader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">importlib.abc.Loader</span></code></a> para um <a class=\"reference internal\" href=\"#term-abstract-base-class\"><span class=\"xref std std-term\">classe base abstrata</span></a>.</p>\n</dd>\n</main>\n"}, "m\u00e9todo m\u00e1gico": {"title": "m\u00e9todo m\u00e1gico", "body": "<main>\n<dd><p id=\"index-26\">Um sin\u00f4nimo informal para um <a class=\"reference internal\" href=\"#term-special-method\"><span class=\"xref std std-term\">m\u00e9todo especial</span></a>.</p>\n</dd>\n</main>\n"}, "mapeamento": {"title": "mapeamento", "body": "<main>\n<dd><p>Um objeto cont\u00eainer que suporta buscas por chaves arbitr\u00e1rias e implementa os m\u00e9todos especificados em <a class=\"reference internal\" href=\"library/collections.abc.html#collections-abstract-base-classes\"><span class=\"std std-ref\">classes base abstratas</span></a> <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Mapping</span></code> ou <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MutableMapping</span></code>. Exemplos incluem <a class=\"reference internal\" href=\"library/stdtypes.html#dict\" title=\"dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a>, <a class=\"reference internal\" href=\"library/collections.html#collections.defaultdict\" title=\"collections.defaultdict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">collections.defaultdict</span></code></a>, <a class=\"reference internal\" href=\"library/collections.html#collections.OrderedDict\" title=\"collections.OrderedDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">collections.OrderedDict</span></code></a> e <a class=\"reference internal\" href=\"library/collections.html#collections.Counter\" title=\"collections.Counter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">collections.Counter</span></code></a>.</p>\n</dd>\n</main>\n"}, "localizador de metacaminho": {"title": "localizador de metacaminho", "body": "<main>\n<dd><p>Um <a class=\"reference internal\" href=\"#term-finder\"><span class=\"xref std std-term\">localizador</span></a> retornado por uma busca de <a class=\"reference internal\" href=\"library/sys.html#sys.meta_path\" title=\"sys.meta_path\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.meta_path</span></code></a>. Localizadores de metacaminho s\u00e3o relacionados a, mas diferentes de, <a class=\"reference internal\" href=\"#term-path-entry-finder\"><span class=\"xref std std-term\">localizadores de entrada de caminho</span></a>.</p>\n<p>Veja <a class=\"reference internal\" href=\"library/importlib.html#importlib.abc.MetaPathFinder\" title=\"importlib.abc.MetaPathFinder\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">importlib.abc.MetaPathFinder</span></code></a> para os m\u00e9todos que localizadores de metacaminho implementam.</p>\n</dd>\n</main>\n"}, "metaclasse": {"title": "metaclasse", "body": "<main>\n<dd><p>A classe de uma classe. Defini\u00e7\u00f5es de classe criam um nome de classe, um dicion\u00e1rio de classe e uma lista de classes base. A metaclasse \u00e9 respons\u00e1vel por receber estes tr\u00eas argumentos e criar a classe. A maioria das linguagens de programa\u00e7\u00e3o orientadas a objetos prov\u00ea uma implementa\u00e7\u00e3o default. O que torna o Python especial \u00e9 o fato de ser poss\u00edvel criar metaclasses personalizadas. A maioria dos usu\u00e1rios nunca vai precisar deste recurso, mas quando houver necessidade, metaclasses possibilitam solu\u00e7\u00f5es poderosas e elegantes. Metaclasses t\u00eam sido utilizadas para gerar registros de acesso a atributos, para incluir prote\u00e7\u00e3o contra acesso concorrente, rastrear a cria\u00e7\u00e3o de objetos, implementar singletons, dentre muitas outras tarefas.</p>\n<p>Mais informa\u00e7\u00f5es podem ser encontradas em <a class=\"reference internal\" href=\"reference/datamodel.html#metaclasses\"><span class=\"std std-ref\">Metaclasses</span></a>.</p>\n</dd>\n</main>\n"}, "m\u00e9todo": {"title": "m\u00e9todo", "body": "<main>\n<dd><p>Uma fun\u00e7\u00e3o que \u00e9 definida dentro do corpo de uma classe. Se chamada como um atributo de uma inst\u00e2ncia daquela classe, o m\u00e9todo receber\u00e1 a inst\u00e2ncia do objeto como seu primeiro <a class=\"reference internal\" href=\"#term-argument\"><span class=\"xref std std-term\">argumento</span></a> (que comumente \u00e9 chamado de <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code>). Veja <a class=\"reference internal\" href=\"#term-function\"><span class=\"xref std std-term\">fun\u00e7\u00e3o</span></a> e <a class=\"reference internal\" href=\"#term-nested-scope\"><span class=\"xref std std-term\">escopo aninhado</span></a>.</p>\n</dd>\n</main>\n"}, "ordem de resolu\u00e7\u00e3o de m\u00e9todos": {"title": "ordem de resolu\u00e7\u00e3o de m\u00e9todos", "body": "<main>\n<dd><p>Ordem de resolu\u00e7\u00e3o de m\u00e9todos \u00e9 a ordem em que os membros de uma classe base s\u00e3o buscados durante a pesquisa. Veja <a class=\"reference external\" href=\"https://www.python.org/download/releases/2.3/mro/\">A ordem de resolu\u00e7\u00e3o de m\u00e9todos do Python 2.3</a> para detalhes do algoritmo usado pelo interpretador do Python desde a vers\u00e3o 2.3.</p>\n</dd>\n</main>\n"}, "m\u00f3dulo": {"title": "m\u00f3dulo", "body": "<main>\n<dd><p>Um objeto que serve como uma unidade organizacional de c\u00f3digo Python. Os m\u00f3dulos t\u00eam um espa\u00e7o de nomes contendo objetos Python arbitr\u00e1rios. Os m\u00f3dulos s\u00e3o carregados pelo Python atrav\u00e9s do processo de <a class=\"reference internal\" href=\"#term-importing\"><span class=\"xref std std-term\">importa\u00e7\u00e3o</span></a>.</p>\n<p>Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-package\"><span class=\"xref std std-term\">pacote</span></a>.</p>\n</dd>\n</main>\n"}, "m\u00f3dulo spec": {"title": "m\u00f3dulo spec", "body": "<main>\n<dd><p>Um espa\u00e7o de nomes que cont\u00e9m as informa\u00e7\u00f5es relacionadas \u00e0 importa\u00e7\u00e3o usadas para carregar um m\u00f3dulo. Uma inst\u00e2ncia de <a class=\"reference internal\" href=\"library/importlib.html#importlib.machinery.ModuleSpec\" title=\"importlib.machinery.ModuleSpec\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">importlib.machinery.ModuleSpec</span></code></a>.</p>\n</dd>\n</main>\n"}, "mro": {"title": "MRO", "body": "<main>\n<dd><p>Veja <a class=\"reference internal\" href=\"#term-method-resolution-order\"><span class=\"xref std std-term\">ordem de resolu\u00e7\u00e3o de m\u00e9todos</span></a>.</p>\n</dd>\n</main>\n"}, "mut\u00e1vel": {"title": "mut\u00e1vel", "body": "<main>\n<dd><p>Objeto mut\u00e1vel \u00e9 aquele que pode modificar seus valor mas manter seu <a class=\"reference internal\" href=\"library/functions.html#id\" title=\"id\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">id()</span></code></a>. Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-immutable\"><span class=\"xref std std-term\">imut\u00e1vel</span></a>.</p>\n</dd>\n</main>\n"}, "tupla nomeada": {"title": "tupla nomeada", "body": "<main>\n<dd><p>O termo \u201ctupla nomeada\u201d \u00e9 aplicado a qualquer tipo ou classe que herda de tupla e cujos elementos index\u00e1veis tamb\u00e9m s\u00e3o acess\u00edveis usando atributos nomeados. O tipo ou classe pode ter outras funcionalidades tamb\u00e9m.</p>\n<p>Diversos tipos embutidos s\u00e3o tuplas nomeadas, incluindo os valores retornados por <a class=\"reference internal\" href=\"library/time.html#time.localtime\" title=\"time.localtime\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">time.localtime()</span></code></a> e <a class=\"reference internal\" href=\"library/os.html#os.stat\" title=\"os.stat\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.stat()</span></code></a>. Outro exemplo \u00e9 <a class=\"reference internal\" href=\"library/sys.html#sys.float_info\" title=\"sys.float_info\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.float_info</span></code></a>:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">float_info</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>                   <span class=\"c1\"># indexed access</span>\n<span class=\"go\">1024</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">float_info</span><span class=\"o\">.</span><span class=\"n\">max_exp</span>              <span class=\"c1\"># named field access</span>\n<span class=\"go\">1024</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">float_info</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)</span>   <span class=\"c1\"># kind of tuple</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>Algumas tuplas nomeadas s\u00e3o tipos embutidos (tal como os exemplos acima). Alternativamente, uma tupla nomeada pode ser criada a partir de uma defini\u00e7\u00e3o de classe regular, que herde de <a class=\"reference internal\" href=\"library/stdtypes.html#tuple\" title=\"tuple\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tuple</span></code></a> e que defina campos nomeados. Tal classe pode ser escrita a m\u00e3o, ou ela pode ser criada com uma fun\u00e7\u00e3o f\u00e1brica <a class=\"reference internal\" href=\"library/collections.html#collections.namedtuple\" title=\"collections.namedtuple\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">collections.namedtuple()</span></code></a>. A segunda t\u00e9cnica tamb\u00e9m adiciona alguns m\u00e9todos extras, que podem n\u00e3o ser encontrados quando foi escrita manualmente, ou em tuplas nomeadas embutidas.</p>\n</dd>\n</main>\n"}, "espa\u00e7o de nomes": {"title": "espa\u00e7o de nomes", "body": "<main>\n<dd><p>O lugar em que uma vari\u00e1vel \u00e9 armazenada. Espa\u00e7os de nomes s\u00e3o implementados como dicion\u00e1rios. Existem os espa\u00e7os de nomes local, global e nativo, bem como espa\u00e7os de nomes aninhados em objetos (em m\u00e9todos). Espa\u00e7os de nomes suportam modularidade ao prevenir conflitos de nomes. Por exemplo, as fun\u00e7\u00f5es <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">__builtin__.open()</span></code> e <a class=\"reference internal\" href=\"library/os.html#os.open\" title=\"os.open\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.open()</span></code></a> s\u00e3o diferenciadas por seus espa\u00e7os de nomes. Espa\u00e7os de nomes tamb\u00e9m auxiliam na legibilidade e na manutenibilidade ao torar mais claro quais m\u00f3dulos implementam uma fun\u00e7\u00e3o. Escrever <a class=\"reference internal\" href=\"library/random.html#random.seed\" title=\"random.seed\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">random.seed()</span></code></a> ou <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">itertools.izip()</span></code>, por exemplo, deixa claro que estas fun\u00e7\u00f5es s\u00e3o implementadas pelos m\u00f3dulos <a class=\"reference internal\" href=\"library/random.html#module-random\" title=\"random: Generate pseudo-random numbers with various common distributions.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">random</span></code></a> e <a class=\"reference internal\" href=\"library/itertools.html#module-itertools\" title=\"itertools: Functions creating iterators for efficient looping.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">itertools</span></code></a> respectivamente.</p>\n</dd>\n</main>\n"}, "pacote de espa\u00e7o de nomes": {"title": "pacote de espa\u00e7o de nomes", "body": "<main>\n<dd><p>Um <a class=\"reference internal\" href=\"#term-package\"><span class=\"xref std std-term\">pacote</span></a> da <span class=\"target\" id=\"index-94\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0420\"><strong>PEP 420</strong></a> que serve apenas como container para sub pacotes. Pacotes de espa\u00e7os de nomes podem n\u00e3o ter representa\u00e7\u00e3o f\u00edsica, e especificamente n\u00e3o s\u00e3o como um <a class=\"reference internal\" href=\"#term-regular-package\"><span class=\"xref std std-term\">pacote regular</span></a> porque eles n\u00e3o tem um arquivo <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__.py</span></code>.</p>\n<p>Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-module\"><span class=\"xref std std-term\">m\u00f3dulo</span></a>.</p>\n</dd>\n</main>\n"}, "escopo aninhado": {"title": "escopo aninhado", "body": "<main>\n<dd><p>A habilidade de referir-se a uma vari\u00e1vel em uma defini\u00e7\u00e3o de fechamento. Por exemplo, uma fun\u00e7\u00e3o definida dentro de outra pode referenciar vari\u00e1veis da fun\u00e7\u00e3o externa. Perceba que escopos aninhados por padr\u00e3o funcionam apenas por refer\u00eancia e n\u00e3o por atribui\u00e7\u00e3o. Vari\u00e1veis locais podem ler e escrever no escopo mais interno. De forma similar, vari\u00e1veis globais podem ler e escrever para o espa\u00e7o de nomes global. O <a class=\"reference internal\" href=\"reference/simple_stmts.html#nonlocal\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">nonlocal</span></code></a> permite escrita para escopos externos.</p>\n</dd>\n</main>\n"}, "classe estilo novo": {"title": "classe estilo novo", "body": "<main>\n<dd><p>Antigo nome para o tipo de classes agora usado para todos os objetos de classes. Em vers\u00f5es anteriores do Python, apenas classes estilo podiam usar recursos novos e vers\u00e1teis do Python, tais como <a class=\"reference internal\" href=\"reference/datamodel.html#object.__slots__\" title=\"object.__slots__\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__slots__</span></code></a>, descritores, propriedades, <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__getattribute__()</span></code>, m\u00e9todos de classe, e m\u00e9todos est\u00e1ticos.</p>\n</dd>\n</main>\n"}, "objeto": {"title": "objeto", "body": "<main>\n<dd><p>Qualquer dado que tenha estado (atributos ou valores) e comportamento definidos (m\u00e9todos). Tamb\u00e9m a \u00faltima classe base de qualquer <a class=\"reference internal\" href=\"#term-new-style-class\"><span class=\"xref std std-term\">classe estilo novo</span></a>.</p>\n</dd>\n</main>\n"}, "pacote": {"title": "pacote", "body": "<main>\n<dd><p>Um <a class=\"reference internal\" href=\"#term-module\"><span class=\"xref std std-term\">m\u00f3dulo</span></a> Python \u00e9 capaz de conter subm\u00f3dulos ou recursivamente, subpacotes. Tecnicamente, um pacote \u00e9 um m\u00f3dulo Python com um atributo <code class=\"docutils literal notranslate\"><span class=\"pre\">__path__</span></code>.</p>\n<p>Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-regular-package\"><span class=\"xref std std-term\">pacote regular</span></a> e <a class=\"reference internal\" href=\"#term-namespace-package\"><span class=\"xref std std-term\">pacote de espa\u00e7o de nomes</span></a>.</p>\n</dd>\n</main>\n"}, "par\u00e2metro": {"title": "par\u00e2metro", "body": "<main>\n<dd><p>Uma entidade nomeada na defini\u00e7\u00e3o de uma <a class=\"reference internal\" href=\"#term-function\"><span class=\"xref std std-term\">fun\u00e7\u00e3o</span></a> (ou m\u00e9todo) que espec\u00edfica um <a class=\"reference internal\" href=\"#term-argument\"><span class=\"xref std std-term\">argumento</span></a> (ou em alguns casos, argumentos) que a fun\u00e7\u00e3o pode receber. Existem cinco tipos de par\u00e2metros:</p>\n<ul>\n<li><p><em class=\"dfn\">posicional-ou-nomeado</em>: especifica um argumento que pode ser tanto <a class=\"reference internal\" href=\"#term-argument\"><span class=\"xref std std-term\">posicional</span></a> quanto <a class=\"reference internal\" href=\"#term-argument\"><span class=\"xref std std-term\">nomeado</span></a>. Esse \u00e9 o tipo padr\u00e3o de par\u00e2metro, por exemplo <em>foo</em> e <em>bar</em> a seguir:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<ul id=\"positional-only-parameter\">\n<li><p><em class=\"dfn\">somente-posicional</em>: especifica um argumento que pode ser fornecido apenas por posi\u00e7\u00e3o. Par\u00e2metros somente-posicionais podem ser definidos incluindo o caractere <code class=\"docutils literal notranslate\"><span class=\"pre\">/</span></code> na lista de par\u00e2metros da defini\u00e7\u00e3o da fun\u00e7\u00e3o ap\u00f3s eles, por exemplo <em>posonly1</em> e <em>posonly2</em> a seguir:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">posonly1</span><span class=\"p\">,</span> <span class=\"n\">posonly2</span><span class=\"p\">,</span> <span class=\"o\">/</span><span class=\"p\">,</span> <span class=\"n\">positional_or_keyword</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<ul id=\"keyword-only-parameter\">\n<li><p><em class=\"dfn\">somente-nomeado</em>: especifica um argumento que pode ser passado para a fun\u00e7\u00e3o somente por nome. Par\u00e2metros somente-nomeados podem ser definidos com um simples par\u00e2metro var-posicional ou um <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> antes deles na lista de par\u00e2metros na defini\u00e7\u00e3o da fun\u00e7\u00e3o, por exemplo <em>kw_only1</em> and <em>kw_only2</em> a seguir:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">kw_only1</span><span class=\"p\">,</span> <span class=\"n\">kw_only2</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n</pre></div>\n</div>\n</li>\n<li><p><em class=\"dfn\">var-posicional</em>: especifica que uma sequ\u00eancia arbitr\u00e1ria de argumentos posicionais pode ser fornecida (em adi\u00e7\u00e3o a qualquer argumento posicional j\u00e1 aceito por outros par\u00e2metros). Tal par\u00e2metro pode ser definido colocando um <code class=\"docutils literal notranslate\"><span class=\"pre\">*</span></code> antes do nome do par\u00e2metro, por exemplo <em>args</em> a seguir:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span> <span class=\"o\">...</span>\n</pre></div>\n</div>\n</li>\n<li><p><em class=\"dfn\">var-nomeado</em>: especifica que, arbitrariamente, muitos argumentos nomeados podem ser fornecidos (em adi\u00e7\u00e3o a qualquer argumento nomeado j\u00e1 aceito por outros par\u00e2metros). Tal par\u00e2metro pode definido colocando-se <code class=\"docutils literal notranslate\"><span class=\"pre\">**</span></code> antes do nome, por exemplo <em>kwargs</em> no exemplo acima.</p></li>\n</ul>\n<p>Par\u00e2metros podem especificar tanto argumentos opcionais quanto obrigat\u00f3rios, assim como valores padr\u00e3o para alguns argumentos opcionais.</p>\n<p>Veja o termo <a class=\"reference internal\" href=\"#term-argument\"><span class=\"xref std std-term\">argumento</span></a> no gloss\u00e1rio, a pergunta sobre <a class=\"reference internal\" href=\"faq/programming.html#faq-argument-vs-parameter\"><span class=\"std std-ref\">a diferen\u00e7a entre argumentos e par\u00e2metros</span></a>, a classe <a class=\"reference internal\" href=\"library/inspect.html#inspect.Parameter\" title=\"inspect.Parameter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">inspect.Parameter</span></code></a>, a se\u00e7\u00e3o <a class=\"reference internal\" href=\"reference/compound_stmts.html#function\"><span class=\"std std-ref\">Defini\u00e7\u00f5es de fun\u00e7\u00e3o</span></a> e a <span class=\"target\" id=\"index-95\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0362\"><strong>PEP 362</strong></a>.</p>\n</dd>\n</main>\n"}, "entrada de caminho": {"title": "entrada de caminho", "body": "<main>\n<dd><p>Um local \u00fanico no <a class=\"reference internal\" href=\"#term-import-path\"><span class=\"xref std std-term\">caminho de importa\u00e7\u00e3o</span></a> que o <a class=\"reference internal\" href=\"#term-path-based-finder\"><span class=\"xref std std-term\">localizador baseado no caminho</span></a> consulta para encontrar m\u00f3dulos a serem importados.</p>\n</dd>\n</main>\n"}, "localizador de entrada de caminho": {"title": "localizador de entrada de caminho", "body": "<main>\n<dd><p>Um <a class=\"reference internal\" href=\"#term-finder\"><span class=\"xref std std-term\">localizador</span></a> retornado por um cham\u00e1vel em <a class=\"reference internal\" href=\"library/sys.html#sys.path_hooks\" title=\"sys.path_hooks\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.path_hooks</span></code></a> (ou seja, um <a class=\"reference internal\" href=\"#term-path-entry-hook\"><span class=\"xref std std-term\">gancho de entrada de caminho</span></a>) que sabe como localizar os m\u00f3dulos <a class=\"reference internal\" href=\"#term-path-entry\"><span class=\"xref std std-term\">entrada de caminho</span></a>.</p>\n<p>Veja <a class=\"reference internal\" href=\"library/importlib.html#importlib.abc.PathEntryFinder\" title=\"importlib.abc.PathEntryFinder\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">importlib.abc.PathEntryFinder</span></code></a> para os m\u00e9todos que localizadores de entrada de caminho implementam.</p>\n</dd>\n</main>\n"}, "gancho de entrada de caminho": {"title": "gancho de entrada de caminho", "body": "<main>\n<dd><p>Um cham\u00e1vel na lista <code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.path_hook</span></code> que retorna um <a class=\"reference internal\" href=\"#term-path-entry-finder\"><span class=\"xref std std-term\">localizador de entrada de caminho</span></a> caso saiba como localizar m\u00f3dulos em uma <a class=\"reference internal\" href=\"#term-path-entry\"><span class=\"xref std std-term\">entrada de caminho</span></a> espec\u00edfica.</p>\n</dd>\n</main>\n"}, "localizador baseado no caminho": {"title": "localizador baseado no caminho", "body": "<main>\n<dd><p>Um dos <a class=\"reference internal\" href=\"#term-meta-path-finder\"><span class=\"xref std std-term\">localizadores de metacaminho</span></a> que procura por um <a class=\"reference internal\" href=\"#term-import-path\"><span class=\"xref std std-term\">caminho de importa\u00e7\u00e3o</span></a> de m\u00f3dulos.</p>\n</dd>\n</main>\n"}, "objeto caminho ou similar": {"title": "objeto caminho ou similar", "body": "<main>\n<dd><p>Um objeto representando um caminho de sistema de arquivos. Um objeto caminho ou similar \u00e9 ou um objeto <a class=\"reference internal\" href=\"library/stdtypes.html#str\" title=\"str\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">str</span></code></a> ou <a class=\"reference internal\" href=\"library/stdtypes.html#bytes\" title=\"bytes\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">bytes</span></code></a> representando um caminho, ou um objeto implementando o protocolo <a class=\"reference internal\" href=\"library/os.html#os.PathLike\" title=\"os.PathLike\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">os.PathLike</span></code></a>. Um objeto que suporta o protocolo <a class=\"reference internal\" href=\"library/os.html#os.PathLike\" title=\"os.PathLike\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">os.PathLike</span></code></a> pode ser convertido para um arquivo de caminho do sistema <a class=\"reference internal\" href=\"library/stdtypes.html#str\" title=\"str\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">str</span></code></a> ou <a class=\"reference internal\" href=\"library/stdtypes.html#bytes\" title=\"bytes\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">bytes</span></code></a>, atrav\u00e9s da chamada da fun\u00e7\u00e3o <a class=\"reference internal\" href=\"library/os.html#os.fspath\" title=\"os.fspath\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.fspath()</span></code></a>; <a class=\"reference internal\" href=\"library/os.html#os.fsdecode\" title=\"os.fsdecode\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.fsdecode()</span></code></a> e <a class=\"reference internal\" href=\"library/os.html#os.fsencode\" title=\"os.fsencode\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.fsencode()</span></code></a> podem ser usadas para garantir um <a class=\"reference internal\" href=\"library/stdtypes.html#str\" title=\"str\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">str</span></code></a> ou <a class=\"reference internal\" href=\"library/stdtypes.html#bytes\" title=\"bytes\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">bytes</span></code></a> como resultado, respectivamente. Introduzido na <span class=\"target\" id=\"index-96\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0519\"><strong>PEP 519</strong></a>.</p>\n</dd>\n</main>\n"}, "pep": {"title": "PEP", "body": "<main>\n<dd><p>Proposta de melhoria do Python. Uma PEP \u00e9 um documento de design que fornece informa\u00e7\u00e3o para a comunidade Python, ou descreve uma nova funcionalidade para o Python ou seus predecessores ou ambientes. PEPs devem prover uma especifica\u00e7\u00e3o t\u00e9cnica concisa e um racional para funcionalidades propostas.</p>\n<p>PEPs t\u00eam a inten\u00e7\u00e3o de ser os mecanismos prim\u00e1rios para propor novas funcionalidades significativas, para coletar opini\u00f5es da comunidade sobre um problema, e para documentar as decis\u00f5es de design que foram adicionadas ao Python. O autor da PEP \u00e9 respons\u00e1vel por construir um consenso dentro da comunidade e documentar opini\u00f5es dissidentes.</p>\n<p>Veja <span class=\"target\" id=\"index-97\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0001\"><strong>PEP 1</strong></a>.</p>\n</dd>\n</main>\n"}, "por\u00e7\u00e3o": {"title": "por\u00e7\u00e3o", "body": "<main>\n<dd><p>Um conjunto de arquivos em um \u00fanico diret\u00f3rio (possivelmente armazenado em um arquivo zip) que contribuem para um pacote de espa\u00e7o de nomes, conforme definido em <span class=\"target\" id=\"index-98\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0420\"><strong>PEP 420</strong></a>.</p>\n</dd>\n</main>\n"}, "argumento posicional": {"title": "argumento posicional", "body": "<main>\n<dd><p>Veja <a class=\"reference internal\" href=\"#term-argument\"><span class=\"xref std std-term\">argumento</span></a>.</p>\n</dd>\n</main>\n"}, "api provis\u00f3ria": {"title": "API provis\u00f3ria", "body": "<main>\n<dd><p>Uma API provis\u00f3ria \u00e9 uma API que foi deliberadamente exclu\u00edda das bibliotecas padr\u00f5es com compatibilidade retroativa garantida. Enquanto mudan\u00e7as maiores para tais interfaces n\u00e3o s\u00e3o esperadas, contanto que elas sejam marcadas como provis\u00f3rias, mudan\u00e7as retroativas incompat\u00edveis (at\u00e9 e incluindo a remo\u00e7\u00e3o da interface) podem ocorrer se consideradas necess\u00e1rias pelos desenvolvedores principais. Tais mudan\u00e7as n\u00e3o ser\u00e3o feitas gratuitamente \u2013 elas ir\u00e3o ocorrer apenas se s\u00e9rias falhas fundamentais forem descobertas, que foram esquecidas anteriormente a inclus\u00e3o da API.</p>\n<p>Mesmo para APIs provis\u00f3rias, mudan\u00e7as retroativas incompat\u00edveis s\u00e3o vistas como uma \u201csolu\u00e7\u00e3o em \u00faltimo caso\u201d - cada tentativa ainda ser\u00e1 feita para encontrar uma resolu\u00e7\u00e3o retroativa compat\u00edvel para quaisquer problemas encontrados.</p>\n<p>Esse processo permite que a biblioteca padr\u00e3o continue a evoluir com o passar do tempo, sem se prender em erros de design problem\u00e1ticos por per\u00edodos de tempo prolongados. Veja <span class=\"target\" id=\"index-99\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0411\"><strong>PEP 411</strong></a> para mais detalhes.</p>\n</dd>\n</main>\n"}, "pacote provis\u00f3rio": {"title": "pacote provis\u00f3rio", "body": "<main>\n<dd><p>Veja <a class=\"reference internal\" href=\"#term-provisional-API\"><span class=\"xref std std-term\">API provis\u00f3ria</span></a>.</p>\n</dd>\n</main>\n"}, "python 3000": {"title": "Python 3000", "body": "<main>\n<dd><p>Apelido para a linha de lan\u00e7amento da vers\u00e3o do Python 3.x (cunhada h\u00e1 muito tempo, quando o lan\u00e7amento da vers\u00e3o 3 era algo em um futuro muito distante.) Esse termo possui a seguinte abrevia\u00e7\u00e3o: \u201cPy3k\u201d.</p>\n</dd>\n</main>\n"}, "pyth\u00f4nico": {"title": "Pyth\u00f4nico", "body": "<main>\n<dd><p>Uma ideia ou um peda\u00e7o de c\u00f3digo que segue de perto os idiomas mais comuns da linguagem Python, ao inv\u00e9s de implementar c\u00f3digos usando conceitos comuns a outros idiomas. Por exemplo, um idioma comum em Python \u00e9 fazer um loop sobre todos os elementos de uma iter\u00e1vel usando a instru\u00e7\u00e3o <a class=\"reference internal\" href=\"reference/compound_stmts.html#for\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">for</span></code></a>. Muitas outras linguagens n\u00e3o t\u00eam esse tipo de constru\u00e7\u00e3o, ent\u00e3o as pessoas que n\u00e3o est\u00e3o familiarizadas com o Python usam um contador num\u00e9rico:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">food</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">food</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>Ao contr\u00e1rio do m\u00e9todo limpo, ou ent\u00e3o, Pyth\u00f4nico:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">piece</span> <span class=\"ow\">in</span> <span class=\"n\">food</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">piece</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd>\n</main>\n"}, "nome qualificado": {"title": "nome qualificado", "body": "<main>\n<dd><p>Um nome pontilhado (quando 2 termos s\u00e3o ligados por um ponto) que mostra o \u201cpath\u201d do escopo global de um m\u00f3dulo para uma classe, fun\u00e7\u00e3o ou m\u00e9todo definido num determinado m\u00f3dulo, conforme definido pela <span class=\"target\" id=\"index-100\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-3155\"><strong>PEP 3155</strong></a>. Para fun\u00e7\u00f5es e classes de n\u00edvel superior, o nome qualificado \u00e9 o mesmo que o nome do objeto:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">class</span> <span class=\"nc\">D</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>        <span class=\"k\">def</span> <span class=\"nf\">meth</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>            <span class=\"k\">pass</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span>\n<span class=\"go\">&#39;C&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">D</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span>\n<span class=\"go\">&#39;C.D&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">C</span><span class=\"o\">.</span><span class=\"n\">D</span><span class=\"o\">.</span><span class=\"n\">meth</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span>\n<span class=\"go\">&#39;C.D.meth&#39;</span>\n</pre></div>\n</div>\n<p>Quando usado para se referir a m\u00f3dulos, o <em>nome totalmente qualificado</em> significa todo o caminho pontilhado para o m\u00f3dulo, incluindo quaisquer pacotes pai, por exemplo: <code class=\"docutils literal notranslate\"><span class=\"pre\">email.mime.text</span></code>:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">email.mime.text</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">email</span><span class=\"o\">.</span><span class=\"n\">mime</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n<span class=\"go\">&#39;email.mime.text&#39;</span>\n</pre></div>\n</div>\n</dd>\n</main>\n"}, "contagem de refer\u00eancias": {"title": "contagem de refer\u00eancias", "body": "<main>\n<dd><p>O n\u00famero de refer\u00eancias para um objeto. Quando a contagem de refer\u00eancias de um objeto atinge zero, ele \u00e9 desalocado. Contagem de refer\u00eancias geralmente n\u00e3o \u00e9 vis\u00edvel no c\u00f3digo Python, mas \u00e9 um elemento chave da implementa\u00e7\u00e3o <a class=\"reference internal\" href=\"#term-CPython\"><span class=\"xref std std-term\">CPython</span></a>. O m\u00f3dulo <a class=\"reference internal\" href=\"library/sys.html#module-sys\" title=\"sys: Access system-specific parameters and functions.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sys</span></code></a> define a fun\u00e7\u00e3o <a class=\"reference internal\" href=\"library/sys.html#sys.getrefcount\" title=\"sys.getrefcount\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">getrefcount()</span></code></a> que programadores podem chamar para retornar a contagem de refer\u00eancias para um objeto em particular.</p>\n</dd>\n</main>\n"}, "pacote regular": {"title": "pacote regular", "body": "<main>\n<dd><p>Um <a class=\"reference internal\" href=\"#term-package\"><span class=\"xref std std-term\">pacote</span></a> tradicional, como um diret\u00f3rio contendo um arquivo <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__.py</span></code>.</p>\n<p>Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-namespace-package\"><span class=\"xref std std-term\">pacote de espa\u00e7o de nomes</span></a>.</p>\n</dd>\n</main>\n"}, "__slots__": {"title": "__slots__", "body": "<main>\n<dd><p>Uma declara\u00e7\u00e3o dentro de uma classe que economiza mem\u00f3ria pr\u00e9-declarando espa\u00e7o para atributos de inst\u00e2ncias, e eliminando dicion\u00e1rios de inst\u00e2ncias. Apesar de popular, a t\u00e9cnica \u00e9 um tanto quanto complicada de acertar, e \u00e9 melhor se for reservada para casos raros, onde existe uma grande quantidade de inst\u00e2ncias em uma aplica\u00e7\u00e3o onde a mem\u00f3ria \u00e9 cr\u00edtica.</p>\n</dd>\n</main>\n"}, "sequ\u00eancia": {"title": "sequ\u00eancia", "body": "<main>\n<dd><p>Um <a class=\"reference internal\" href=\"#term-iterable\"><span class=\"xref std std-term\">iter\u00e1vel</span></a> com suporte para acesso eficiente a seus elementos atrav\u00e9s de \u00edndices inteiros via m\u00e9todo especial <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__getitem__()</span></code> e que define o m\u00e9todo <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__len__()</span></code> que devolve o tamanho da sequ\u00eancia. Alguns tipos de sequ\u00eancia embutidos s\u00e3o: <a class=\"reference internal\" href=\"library/stdtypes.html#list\" title=\"list\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">list</span></code></a>, <a class=\"reference internal\" href=\"library/stdtypes.html#str\" title=\"str\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">str</span></code></a>, <a class=\"reference internal\" href=\"library/stdtypes.html#tuple\" title=\"tuple\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tuple</span></code></a>, e <a class=\"reference internal\" href=\"library/stdtypes.html#bytes\" title=\"bytes\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">bytes</span></code></a>. Note que <a class=\"reference internal\" href=\"library/stdtypes.html#dict\" title=\"dict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a> tamb\u00e9m tem suporte para <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__getitem__()</span></code> e <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__len__()</span></code>, mas \u00e9 considerado um mapa e n\u00e3o uma sequ\u00eancia porque a busca usa uma chave <a class=\"reference internal\" href=\"#term-immutable\"><span class=\"xref std std-term\">imut\u00e1vel</span></a> arbitr\u00e1ria em vez de inteiros.</p>\n<p>A classe base abstrata <a class=\"reference internal\" href=\"library/collections.abc.html#collections.abc.Sequence\" title=\"collections.abc.Sequence\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">collections.abc.Sequence</span></code></a> define uma interface mais rica que vai al\u00e9m de apenas <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__getitem__()</span></code> e <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__len__()</span></code>, adicionando <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">count()</span></code>, <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">index()</span></code>, <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__contains__()</span></code>, e <code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__reversed__()</span></code>. Tipos que implementam essa interface podem ser explicitamente registrados usando <a class=\"reference internal\" href=\"library/abc.html#abc.ABCMeta.register\" title=\"abc.ABCMeta.register\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">register()</span></code></a>.</p>\n</dd>\n</main>\n"}, "compreens\u00e3o de conjunto": {"title": "compreens\u00e3o de conjunto", "body": "<main>\n<dd><p>Uma maneira compacta de processar todos ou parte dos elementos em iter\u00e1vel e retornar um conjunto com os resultados. <code class=\"docutils literal notranslate\"><span class=\"pre\">results</span> <span class=\"pre\">=</span> <span class=\"pre\">{c</span> <span class=\"pre\">for</span> <span class=\"pre\">c</span> <span class=\"pre\">in</span> <span class=\"pre\">'abracadabra'</span> <span class=\"pre\">if</span> <span class=\"pre\">c</span> <span class=\"pre\">not</span> <span class=\"pre\">in</span> <span class=\"pre\">'abc'}</span></code> gera um conjunto de strings <code class=\"docutils literal notranslate\"><span class=\"pre\">{'r',</span> <span class=\"pre\">'d'}</span></code>.  Veja <a class=\"reference internal\" href=\"reference/expressions.html#comprehensions\"><span class=\"std std-ref\">Displays for lists, sets and dictionaries</span></a>.</p>\n</dd>\n</main>\n"}, "despacho \u00fanico": {"title": "despacho \u00fanico", "body": "<main>\n<dd><p>Uma forma de despacho de <a class=\"reference internal\" href=\"#term-generic-function\"><span class=\"xref std std-term\">fun\u00e7\u00e3o gen\u00e9rica</span></a> onde a implementa\u00e7\u00e3o \u00e9 escolhida com base no tipo de um \u00fanico argumento.</p>\n</dd>\n</main>\n"}, "fatia": {"title": "fatia", "body": "<main>\n<dd><p>Um objeto geralmente contendo uma parte de uma <a class=\"reference internal\" href=\"#term-sequence\"><span class=\"xref std std-term\">sequ\u00eancia</span></a>. Uma fatia \u00e9 criada usando a nota\u00e7\u00e3o de subscrito <code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> pode conter tamb\u00e9m at\u00e9 dois pontos entre n\u00fameros, como em <code class=\"docutils literal notranslate\"><span class=\"pre\">variable_name[1:3:5]</span></code>. A nota\u00e7\u00e3o de suporte (subscrito) utiliza objetos <a class=\"reference internal\" href=\"library/functions.html#slice\" title=\"slice\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">slice</span></code></a> internamente.</p>\n</dd>\n</main>\n"}, "m\u00e9todo especial": {"title": "m\u00e9todo especial", "body": "<main>\n<dd><p id=\"index-34\">Um m\u00e9todo que \u00e9 chamado implicitamente pelo Python para executar uma certa opera\u00e7\u00e3o em um tipo, como uma adi\u00e7\u00e3o por exemplo. Tais m\u00e9todos tem nomes iniciando e terminando com dois underscores. M\u00e9todos especiais est\u00e3o documentados em <a class=\"reference internal\" href=\"reference/datamodel.html#specialnames\"><span class=\"std std-ref\">Nomes de m\u00e9todos especiais</span></a>.</p>\n</dd>\n</main>\n"}, "instru\u00e7\u00e3o": {"title": "instru\u00e7\u00e3o", "body": "<main>\n<dd><p>Uma instru\u00e7\u00e3o \u00e9 parte de uma su\u00edte (um \u201cbloco\u201d de c\u00f3digo). Uma instru\u00e7\u00e3o \u00e9 ou uma <a class=\"reference internal\" href=\"#term-expression\"><span class=\"xref std std-term\">express\u00e3o</span></a> ou uma de v\u00e1rias constru\u00e7\u00f5es com uma palavra reservada, tal como <a class=\"reference internal\" href=\"reference/compound_stmts.html#if\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">if</span></code></a>, <a class=\"reference internal\" href=\"reference/compound_stmts.html#while\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">while</span></code></a> ou <a class=\"reference internal\" href=\"reference/compound_stmts.html#for\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">for</span></code></a>.</p>\n</dd>\n</main>\n"}, "refer\u00eancia forte": {"title": "refer\u00eancia forte", "body": "<main>\n<dd><p>Na API C do Python, uma refer\u00eancia forte \u00e9 uma refer\u00eancia a um objeto que aumenta a contagem de refer\u00eancias do objeto quando ele \u00e9 criado e diminui a contagem de refer\u00eancias do objeto quando ele \u00e9 exclu\u00eddo.</p>\n<p>A fun\u00e7\u00e3o <a class=\"reference internal\" href=\"c-api/refcounting.html#c.Py_NewRef\" title=\"Py_NewRef\"><code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_NewRef()</span></code></a> pode ser usada para criar uma refer\u00eancia forte para um objeto. Normalmente, a fun\u00e7\u00e3o <a class=\"reference internal\" href=\"c-api/refcounting.html#c.Py_DECREF\" title=\"Py_DECREF\"><code class=\"xref c c-func docutils literal notranslate\"><span class=\"pre\">Py_DECREF()</span></code></a> deve ser chamada na refer\u00eancia forte antes de sair do escopo da refer\u00eancia forte, para evitar o vazamento de uma refer\u00eancia.</p>\n<p>Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-borrowed-reference\"><span class=\"xref std std-term\">refer\u00eancia emprestada</span></a>.</p>\n</dd>\n</main>\n"}, "codificador de texto": {"title": "codificador de texto", "body": "<main>\n<dd><p>A string in Python is a sequence of Unicode code points (in range\n<code class=\"docutils literal notranslate\"><span class=\"pre\">U+0000</span></code>\u2013<code class=\"docutils literal notranslate\"><span class=\"pre\">U+10FFFF</span></code>). To store or transfer a string, it needs to be\nserialized as a sequence of bytes.</p>\n<p>Serializing a string into a sequence of bytes is known as \u201cencoding\u201d, and\nrecreating the string from the sequence of bytes is known as \u201cdecoding\u201d.</p>\n<p>There are a variety of different text serialization\n<a class=\"reference internal\" href=\"library/codecs.html#standard-encodings\"><span class=\"std std-ref\">codecs</span></a>, which are collectively referred to as\n\u201ctext encodings\u201d.</p>\n</dd>\n</main>\n"}, "arquivo texto": {"title": "arquivo texto", "body": "<main>\n<dd><p>Um  <a class=\"reference internal\" href=\"#term-file-object\"><span class=\"xref std std-term\">objeto arquivo</span></a> apto a ler e escrever objetos <a class=\"reference internal\" href=\"library/stdtypes.html#str\" title=\"str\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">str</span></code></a>. Geralmente, um arquivo texto, na verdade, acessa um fluxo de dados de bytes e captura o <a class=\"reference internal\" href=\"#term-text-encoding\"><span class=\"xref std std-term\">codificador de texto</span></a> automaticamente. Exemplos de arquivos texto s\u00e3o: arquivos abertos em modo texto (<code class=\"docutils literal notranslate\"><span class=\"pre\">'r'</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">'w'</span></code>), <a class=\"reference internal\" href=\"library/sys.html#sys.stdin\" title=\"sys.stdin\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.stdin</span></code></a>, <a class=\"reference internal\" href=\"library/sys.html#sys.stdout\" title=\"sys.stdout\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">sys.stdout</span></code></a>, e inst\u00e2ncias de <a class=\"reference internal\" href=\"library/io.html#io.StringIO\" title=\"io.StringIO\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">io.StringIO</span></code></a>.</p>\n<p>Veja tamb\u00e9m <a class=\"reference internal\" href=\"#term-binary-file\"><span class=\"xref std std-term\">arquivo bin\u00e1rio</span></a> para um objeto arquivo apto a ler e escrever <a class=\"reference internal\" href=\"#term-bytes-like-object\"><span class=\"xref std std-term\">objetos byte ou similar</span></a>.</p>\n</dd>\n</main>\n"}, "aspas triplas": {"title": "aspas triplas", "body": "<main>\n<dd><p>Uma string que est\u00e1 definida com tr\u00eas ocorr\u00eancias de aspas duplas (\u201d) ou ap\u00f3strofos (\u2018). Enquanto elas n\u00e3o fornecem nenhuma funcionalidade n\u00e3o dispon\u00edvel com strings de aspas simples, elas s\u00e3o \u00fateis para in\u00fameras raz\u00f5es. Elas permitem que voc\u00ea inclua aspas simples e duplas n\u00e3o escapadas dentro de uma string, e elas podem utilizar m\u00faltiplas linhas sem o uso de caractere de continua\u00e7\u00e3o, fazendo-as especialmente \u00fateis quando escrevemos documenta\u00e7\u00e3o em docstrings.</p>\n</dd>\n</main>\n"}, "tipo": {"title": "tipo", "body": "<main>\n<dd><p>O tipo de um objeto Python determina qual tipo de objeto ele \u00e9; cada objeto tem um tipo. Um tipo de objeto \u00e9 acess\u00edvel pelo atributo <code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">__class__</span></code> ou pode ser recuperado com <code class=\"docutils literal notranslate\"><span class=\"pre\">type(obj)</span></code>.</p>\n</dd>\n</main>\n"}, "tipo alias": {"title": "tipo alias", "body": "<main>\n<dd><p>Um sin\u00f4nimo para um tipo, criado atrav\u00e9s da atribui\u00e7\u00e3o do tipo para um identificador.</p>\n<p>Tipos alias s\u00e3o \u00fateis para simplificar <a class=\"reference internal\" href=\"#term-type-hint\"><span class=\"xref std std-term\">dicas de tipo</span></a>. Por exemplo:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">remove_gray_shades</span><span class=\"p\">(</span>\n        <span class=\"n\">colors</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]:</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>pode tornar-se mais leg\u00edvel desta forma:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Color</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">remove_gray_shades</span><span class=\"p\">(</span><span class=\"n\">colors</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Color</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Color</span><span class=\"p\">]:</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>Veja <a class=\"reference internal\" href=\"library/typing.html#module-typing\" title=\"typing: Support for type hints (see :pep:`484`).\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">typing</span></code></a> e <span class=\"target\" id=\"index-101\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0484\"><strong>PEP 484</strong></a>, a qual descreve esta funcionalidade.</p>\n</dd>\n</main>\n"}, "dica de tipo": {"title": "dica de tipo", "body": "<main>\n<dd><p>Uma <a class=\"reference internal\" href=\"#term-annotation\"><span class=\"xref std std-term\">anota\u00e7\u00e3o</span></a> que especifica o tipo esperado para uma vari\u00e1vel, um atributo de classe, ou um par\u00e2metro de fun\u00e7\u00e3o ou um valor de retorno.</p>\n<p>Dicas de tipo s\u00e3o opcionais e n\u00e3o s\u00e3o for\u00e7adas pelo Python, mas elas s\u00e3o \u00fateis para ferramentas de an\u00e1lise de tipos est\u00e1tico, e ajudam IDEs a completar e refatorar c\u00f3digo.</p>\n<p>Dicas de tipos de vari\u00e1veis globais, atributos de classes, e fun\u00e7\u00f5es, mas n\u00e3o de vari\u00e1veis locais, podem ser acessadas usando <a class=\"reference internal\" href=\"library/typing.html#typing.get_type_hints\" title=\"typing.get_type_hints\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">typing.get_type_hints()</span></code></a>.</p>\n<p>Veja <a class=\"reference internal\" href=\"library/typing.html#module-typing\" title=\"typing: Support for type hints (see :pep:`484`).\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">typing</span></code></a> e <span class=\"target\" id=\"index-102\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0484\"><strong>PEP 484</strong></a>, a qual descreve esta funcionalidade.</p>\n</dd>\n</main>\n"}, "novas linhas universais": {"title": "novas linhas universais", "body": "<main>\n<dd><p>Uma maneira de interpretar fluxos de textos, na qual todos estes s\u00e3o reconhecidos como caracteres de fim de linha: a conven\u00e7\u00e3o para fim de linha no Unix <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\n'</span></code>, a conven\u00e7\u00e3o no Windows <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\r\\n'</span></code>, e a antiga conven\u00e7\u00e3o no Macintosh <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\r'</span></code>. Veja <span class=\"target\" id=\"index-103\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0278\"><strong>PEP 278</strong></a> e <span class=\"target\" id=\"index-104\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-3116\"><strong>PEP 3116</strong></a>, bem como <a class=\"reference internal\" href=\"library/stdtypes.html#bytes.splitlines\" title=\"bytes.splitlines\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">bytes.splitlines()</span></code></a> para uso adicional.</p>\n</dd>\n</main>\n"}, "anota\u00e7\u00e3o de vari\u00e1vel": {"title": "anota\u00e7\u00e3o de vari\u00e1vel", "body": "<main>\n<dd><p>Uma <a class=\"reference internal\" href=\"#term-annotation\"><span class=\"xref std std-term\">anota\u00e7\u00e3o</span></a> de uma vari\u00e1vel ou um atributo de classe.</p>\n<p>Ao fazer uma anota\u00e7\u00e3o de uma vari\u00e1vel ou um atributo de classe, a atribui\u00e7\u00e3o \u00e9 opcional:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">C</span><span class=\"p\">:</span>\n    <span class=\"n\">field</span><span class=\"p\">:</span> <span class=\"s1\">&#39;annotation&#39;</span>\n</pre></div>\n</div>\n<p>Anota\u00e7\u00f5es de vari\u00e1veis s\u00e3o normalmente usadas para <a class=\"reference internal\" href=\"#term-type-hint\"><span class=\"xref std std-term\">dicas de tipo</span></a>: por exemplo, espera-se que esta vari\u00e1vel receba valores do tipo <a class=\"reference internal\" href=\"library/functions.html#int\" title=\"int\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">int</span></code></a>:</p>\n<div class=\"highlight-python3 notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n</pre></div>\n</div>\n<p>A sintaxe de anota\u00e7\u00e3o de vari\u00e1vel \u00e9 explicada na se\u00e7\u00e3o <a class=\"reference internal\" href=\"reference/simple_stmts.html#annassign\"><span class=\"std std-ref\">Annotated assignment statements</span></a>.</p>\n<p>Veja <a class=\"reference internal\" href=\"#term-function-annotation\"><span class=\"xref std std-term\">anota\u00e7\u00e3o de fun\u00e7\u00e3o</span></a>, <span class=\"target\" id=\"index-105\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0484\"><strong>PEP 484</strong></a> e <span class=\"target\" id=\"index-106\"></span><a class=\"pep reference external\" href=\"https://www.python.org/dev/peps/pep-0526\"><strong>PEP 526</strong></a>, que descrevem esta funcionalidade. Veja tamb\u00e9m <a class=\"reference internal\" href=\"howto/annotations.html#annotations-howto\"><span class=\"std std-ref\">Annotations Best Practices</span></a> para as melhores pr\u00e1ticas sobre como trabalhar com anota\u00e7\u00f5es.</p>\n</dd>\n</main>\n"}, "ambiente virtual": {"title": "ambiente virtual", "body": "<main>\n<dd><p>Um ambiente de execu\u00e7\u00e3o isolado que permite usu\u00e1rios Python e aplica\u00e7\u00f5es instalarem e atualizarem pacotes Python sem interferir no comportamento de outras aplica\u00e7\u00f5es Python em execu\u00e7\u00e3o no mesmo sistema.</p>\n<p>Veja tamb\u00e9m <a class=\"reference internal\" href=\"library/venv.html#module-venv\" title=\"venv: Creation of virtual environments.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">venv</span></code></a>.</p>\n</dd>\n</main>\n"}, "m\u00e1quina virtual": {"title": "m\u00e1quina virtual", "body": "<main>\n<dd><p>Um computador definido inteiramente em software. A m\u00e1quina virtual de Python executa o <a class=\"reference internal\" href=\"#term-bytecode\"><span class=\"xref std std-term\">bytecode</span></a> emitido pelo compilador de bytecode.</p>\n</dd>\n</main>\n"}, "zen do python": {"title": "Zen do Python", "body": "<main>\n<dd><p>Lista de princ\u00edpios de projeto e filosofias do Python que s\u00e3o \u00fateis para a compreens\u00e3o e uso da linguagem. A lista \u00e9 exibida quando se digita \u201c<code class=\"docutils literal notranslate\"><span class=\"pre\">import</span> <span class=\"pre\">this</span></code>\u201d no console interativo.</p>\n</dd>\n</main>\n"}}